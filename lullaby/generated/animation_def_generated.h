// Autogenerated code.  Do not edit.
#ifndef _LULLABY_LULLABY_GENERATED_ANIMATION_DEF_GENERATED_H_
#define _LULLABY_LULLABY_GENERATED_ANIMATION_DEF_GENERATED_H_

#include <type_traits>
#include <memory>
#include "flatbuffers/animation_def_generated.h"
#include "lullaby/util/color.h"
#include "lullaby/util/common_types.h"
#include "lullaby/util/math.h"
#include "lullaby/util/optional.h"
#include "lullaby/util/typeid.h"
#include "common_generated.h"
#include "dispatcher_def_generated.h"
#include "variant_def_generated.h"

namespace lull {
class AnimInstanceDefT;
class AnimTargetDefT;
class DefiningAnimDefT;
class AnimationDefT;
class AnimInstanceDefT {
 public:
  using FlatBufferType = AnimInstanceDef;

  AnimInstanceDefT() {}

  std::vector<std::string> filenames;
  std::string channel;
  bool looping = 0;
  float speed = 1.0f;
  float start_delay = 0.0f;
  std::vector<float> offset;
  std::vector<float> multiplier;
  float blend_time = 0.0f;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class AnimTargetDefT {
 public:
  using FlatBufferType = AnimTargetDef;

  AnimTargetDefT() {}

  std::string channel;
  std::vector<float> values;
  int32_t time_ms = 0;
  int32_t start_delay_ms = 0;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class DefiningAnimDefT {
 public:
  using FlatBufferType = DefiningAnimDef;

  DefiningAnimDefT() {}

  std::string filename;
  std::string channel;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class AnimationDefT {
 public:
  using FlatBufferType = AnimationDef;

  AnimationDefT() {}

  std::vector<lull::AnimInstanceDefT> animations;
  std::vector<lull::AnimTargetDefT> targets;
  std::vector<lull::EventDefT> on_complete_events;
  std::vector<lull::EventDefT> on_success_events;
  std::vector<lull::EventDefT> on_cancelled_events;
  lull::DefiningAnimDefT defining_animation;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

template <typename Archive>
void AnimInstanceDefT::SerializeFlatbuffer(Archive archive) {
  archive.VectorOfStrings(&filenames, 4);
  archive.String(&channel, 6);
  archive.VectorOfScalars(&offset, 14);
  archive.VectorOfScalars(&multiplier, 16);
  archive.Scalar(&looping, 8, 0);
  archive.Scalar(&speed, 10, 1.0f);
  archive.Scalar(&start_delay, 12, 0.0f);
  archive.Scalar(&blend_time, 18, 0.0f);
}

template <typename Archive>
void AnimTargetDefT::SerializeFlatbuffer(Archive archive) {
  archive.String(&channel, 4);
  archive.VectorOfScalars(&values, 6);
  archive.Scalar(&time_ms, 8, 0);
  archive.Scalar(&start_delay_ms, 10, 0);
}

template <typename Archive>
void DefiningAnimDefT::SerializeFlatbuffer(Archive archive) {
  archive.String(&filename, 4);
  archive.String(&channel, 6);
}

template <typename Archive>
void AnimationDefT::SerializeFlatbuffer(Archive archive) {
  archive.VectorOfTables(&animations, 4);
  archive.VectorOfTables(&targets, 6);
  archive.VectorOfTables(&on_complete_events, 8);
  archive.VectorOfTables(&on_success_events, 10);
  archive.VectorOfTables(&on_cancelled_events, 12);
  archive.Table(&defining_animation, 14);
}

}  // namespace lull

LULLABY_SETUP_TYPEID(lull::AnimInstanceDefT);
LULLABY_SETUP_TYPEID(lull::AnimTargetDefT);
LULLABY_SETUP_TYPEID(lull::DefiningAnimDefT);
LULLABY_SETUP_TYPEID(lull::AnimationDefT);

#endif  // _LULLABY_LULLABY_GENERATED_ANIMATION_DEF_GENERATED_H_

