// Autogenerated code.  Do not edit.
#ifndef _LULLABY_LULLABY_GENERATED_AUDIO_ENVIRONMENT_DEF_GENERATED_H_
#define _LULLABY_LULLABY_GENERATED_AUDIO_ENVIRONMENT_DEF_GENERATED_H_

#include <type_traits>
#include <memory>
#include "flatbuffers/audio_environment_def_generated.h"
#include "lullaby/util/common_types.h"
#include "lullaby/util/color.h"
#include "lullaby/util/math.h"
#include "lullaby/util/optional.h"
#include "lullaby/util/typeid.h"
#include "common_generated.h"
#include "dispatcher_def_generated.h"
#include "variant_def_generated.h"

namespace lull {
class AudioEnvironmentDefT;
class AudioEnvironmentDefT {
 public:
  using FlatBufferType = AudioEnvironmentDef;

  AudioEnvironmentDefT() {}

  std::vector<lull::EventDefT> set_environment_events;
  bool enable_on_create = 0;
  mathfu::vec3 room_dimensions = {0.f, 0.f, 0.f};
  float reflection_scalar = 0.0f;
  float reverb_brightness_modifier = 0.0f;
  float reverb_gain = 0.0f;
  float reverb_time = 0.0f;
  lull::AudioSurfaceMaterial surface_material_wall = lull::AudioSurfaceMaterial_Transparent;
  lull::AudioSurfaceMaterial surface_material_ceiling = lull::AudioSurfaceMaterial_Transparent;
  lull::AudioSurfaceMaterial surface_material_floor = lull::AudioSurfaceMaterial_Transparent;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

template <typename Archive>
void AudioEnvironmentDefT::SerializeFlatbuffer(Archive archive) {
  archive.VectorOfTables(&set_environment_events, 4);
  archive.Scalar(&enable_on_create, 6, 0);
  archive.NativeStruct(&room_dimensions, 8);
  archive.Scalar(&reflection_scalar, 10, 0.0f);
  archive.Scalar(&reverb_brightness_modifier, 12, 0.0f);
  archive.Scalar(&reverb_gain, 14, 0.0f);
  archive.Scalar(&reverb_time, 16, 0.0f);
  int32_t _surface_material_wall = static_cast<int32_t>(surface_material_wall);
  archive.Scalar(&_surface_material_wall, 18, lull::AudioSurfaceMaterial_Transparent);
  surface_material_wall = static_cast<lull::AudioSurfaceMaterial>(_surface_material_wall);
  int32_t _surface_material_ceiling = static_cast<int32_t>(surface_material_ceiling);
  archive.Scalar(&_surface_material_ceiling, 20, lull::AudioSurfaceMaterial_Transparent);
  surface_material_ceiling = static_cast<lull::AudioSurfaceMaterial>(_surface_material_ceiling);
  int32_t _surface_material_floor = static_cast<int32_t>(surface_material_floor);
  archive.Scalar(&_surface_material_floor, 22, lull::AudioSurfaceMaterial_Transparent);
  surface_material_floor = static_cast<lull::AudioSurfaceMaterial>(_surface_material_floor);
}

}  // namespace lull

LULLABY_SETUP_TYPEID(lull::AudioSurfaceMaterial);
LULLABY_SETUP_TYPEID(lull::AudioEnvironmentDefT);

#endif  // _LULLABY_LULLABY_GENERATED_AUDIO_ENVIRONMENT_DEF_GENERATED_H_

