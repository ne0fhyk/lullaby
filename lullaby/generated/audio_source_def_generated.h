// Autogenerated code.  Do not edit.
#ifndef _LULLABY_LULLABY_GENERATED_AUDIO_SOURCE_DEF_GENERATED_H_
#define _LULLABY_LULLABY_GENERATED_AUDIO_SOURCE_DEF_GENERATED_H_

#include <type_traits>
#include <memory>
#include "flatbuffers/audio_source_def_generated.h"
#include "lullaby/util/common_types.h"
#include "lullaby/util/color.h"
#include "lullaby/util/math.h"
#include "lullaby/util/optional.h"
#include "lullaby/util/typeid.h"
#include "audio_playback_types_generated.h"
#include "common_generated.h"

namespace lull {
class AudioSourceDefT;
class AudioSourceDefT {
 public:
  using FlatBufferType = AudioSourceDef;

  AudioSourceDefT() {}

  std::string sound;
  float volume = 1.0f;
  bool loop = 0;
  lull::AudioSourceType source_type = lull::AudioSourceType_Spatialized;
  lull::AudioPlaybackType playback_type = lull::AudioPlaybackType_Stream;
  float spatial_directivity_alpha = -1.0f;
  float spatial_directivity_order = -1.0f;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

template <typename Archive>
void AudioSourceDefT::SerializeFlatbuffer(Archive archive) {
  archive.String(&sound, 4);
  archive.Scalar(&volume, 6, 1.0f);
  archive.Scalar(&loop, 8, 0);
  int32_t _source_type = static_cast<int32_t>(source_type);
  archive.Scalar(&_source_type, 10, lull::AudioSourceType_Spatialized);
  source_type = static_cast<lull::AudioSourceType>(_source_type);
  int32_t _playback_type = static_cast<int32_t>(playback_type);
  archive.Scalar(&_playback_type, 12, lull::AudioPlaybackType_Stream);
  playback_type = static_cast<lull::AudioPlaybackType>(_playback_type);
  archive.Scalar(&spatial_directivity_alpha, 14, -1.0f);
  archive.Scalar(&spatial_directivity_order, 16, -1.0f);
}

}  // namespace lull

LULLABY_SETUP_TYPEID(lull::AudioSourceDefT);

#endif  // _LULLABY_LULLABY_GENERATED_AUDIO_SOURCE_DEF_GENERATED_H_

