// Autogenerated code.  Do not edit.
#ifndef _LULLABY_LULLABY_GENERATED_DISPATCHER_DEF_GENERATED_H_
#define _LULLABY_LULLABY_GENERATED_DISPATCHER_DEF_GENERATED_H_

#include <type_traits>
#include <memory>
#include "flatbuffers/dispatcher_def_generated.h"
#include "lullaby/util/color.h"
#include "lullaby/util/common_types.h"
#include "lullaby/util/math.h"
#include "lullaby/util/optional.h"
#include "lullaby/util/typeid.h"
#include "common_generated.h"
#include "variant_def_generated.h"

namespace lull {
class EventDefT;
class EventResponseDefT;
class EventDefT {
 public:
  using FlatBufferType = EventDef;

  EventDefT() {}

  std::string event;
  bool local = 0;
  bool global = 0;
  std::vector<lull::KeyVariantPairDefT> values;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class EventResponseDefT {
 public:
  using FlatBufferType = EventResponseDef;

  EventResponseDefT() {}

  std::vector<lull::EventDefT> inputs;
  std::vector<lull::EventDefT> outputs;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

template <typename Archive>
void EventDefT::SerializeFlatbuffer(Archive archive) {
  archive.String(&event, 4);
  archive.VectorOfTables(&values, 10);
  archive.Scalar(&local, 6, 0);
  archive.Scalar(&global, 8, 0);
}

template <typename Archive>
void EventResponseDefT::SerializeFlatbuffer(Archive archive) {
  archive.VectorOfTables(&inputs, 4);
  archive.VectorOfTables(&outputs, 6);
}

}  // namespace lull

LULLABY_SETUP_TYPEID(lull::EventDefT);
LULLABY_SETUP_TYPEID(lull::EventResponseDefT);

#endif  // _LULLABY_LULLABY_GENERATED_DISPATCHER_DEF_GENERATED_H_

