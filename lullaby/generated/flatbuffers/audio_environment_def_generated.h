// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUDIOENVIRONMENTDEF_LULL_H_
#define FLATBUFFERS_GENERATED_AUDIOENVIRONMENTDEF_LULL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "dispatcher_def_generated.h"
#include "variant_def_generated.h"

namespace lull {

struct AudioEnvironmentDef;

enum AudioSurfaceMaterial {
  AudioSurfaceMaterial_Transparent = 0,
  AudioSurfaceMaterial_AcousticCeilingTiles = 1,
  AudioSurfaceMaterial_BrickBare = 2,
  AudioSurfaceMaterial_BrickPainted = 3,
  AudioSurfaceMaterial_ConcreteBlockCoarse = 4,
  AudioSurfaceMaterial_ConcreteBlockPainted = 5,
  AudioSurfaceMaterial_CurtainHeavy = 6,
  AudioSurfaceMaterial_FiberGlassInsulation = 7,
  AudioSurfaceMaterial_GlassThin = 8,
  AudioSurfaceMaterial_GlassThick = 9,
  AudioSurfaceMaterial_Grass = 10,
  AudioSurfaceMaterial_LinoleumOnConcrete = 11,
  AudioSurfaceMaterial_Marble = 12,
  AudioSurfaceMaterial_Metal = 13,
  AudioSurfaceMaterial_ParquetOnConcrete = 14,
  AudioSurfaceMaterial_PlasterRough = 15,
  AudioSurfaceMaterial_PlasterSmooth = 16,
  AudioSurfaceMaterial_PlywoodPanel = 17,
  AudioSurfaceMaterial_PolishedConcreteOrTile = 18,
  AudioSurfaceMaterial_Sheetrock = 19,
  AudioSurfaceMaterial_WaterOrIceSurface = 20,
  AudioSurfaceMaterial_WoodCeiling = 21,
  AudioSurfaceMaterial_WoodPanel = 22,
  AudioSurfaceMaterial_MIN = AudioSurfaceMaterial_Transparent,
  AudioSurfaceMaterial_MAX = AudioSurfaceMaterial_WoodPanel
};

inline AudioSurfaceMaterial (&EnumValuesAudioSurfaceMaterial())[23] {
  static AudioSurfaceMaterial values[] = {
    AudioSurfaceMaterial_Transparent,
    AudioSurfaceMaterial_AcousticCeilingTiles,
    AudioSurfaceMaterial_BrickBare,
    AudioSurfaceMaterial_BrickPainted,
    AudioSurfaceMaterial_ConcreteBlockCoarse,
    AudioSurfaceMaterial_ConcreteBlockPainted,
    AudioSurfaceMaterial_CurtainHeavy,
    AudioSurfaceMaterial_FiberGlassInsulation,
    AudioSurfaceMaterial_GlassThin,
    AudioSurfaceMaterial_GlassThick,
    AudioSurfaceMaterial_Grass,
    AudioSurfaceMaterial_LinoleumOnConcrete,
    AudioSurfaceMaterial_Marble,
    AudioSurfaceMaterial_Metal,
    AudioSurfaceMaterial_ParquetOnConcrete,
    AudioSurfaceMaterial_PlasterRough,
    AudioSurfaceMaterial_PlasterSmooth,
    AudioSurfaceMaterial_PlywoodPanel,
    AudioSurfaceMaterial_PolishedConcreteOrTile,
    AudioSurfaceMaterial_Sheetrock,
    AudioSurfaceMaterial_WaterOrIceSurface,
    AudioSurfaceMaterial_WoodCeiling,
    AudioSurfaceMaterial_WoodPanel
  };
  return values;
}

inline const char **EnumNamesAudioSurfaceMaterial() {
  static const char *names[] = {
    "Transparent",
    "AcousticCeilingTiles",
    "BrickBare",
    "BrickPainted",
    "ConcreteBlockCoarse",
    "ConcreteBlockPainted",
    "CurtainHeavy",
    "FiberGlassInsulation",
    "GlassThin",
    "GlassThick",
    "Grass",
    "LinoleumOnConcrete",
    "Marble",
    "Metal",
    "ParquetOnConcrete",
    "PlasterRough",
    "PlasterSmooth",
    "PlywoodPanel",
    "PolishedConcreteOrTile",
    "Sheetrock",
    "WaterOrIceSurface",
    "WoodCeiling",
    "WoodPanel",
    nullptr
  };
  return names;
}

inline const char *EnumNameAudioSurfaceMaterial(AudioSurfaceMaterial e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesAudioSurfaceMaterial()[index];
}

struct AudioEnvironmentDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.AudioEnvironmentDef";
  }
  enum {
    VT_SET_ENVIRONMENT_EVENTS = 4,
    VT_ENABLE_ON_CREATE = 6,
    VT_ROOM_DIMENSIONS = 8,
    VT_REFLECTION_SCALAR = 10,
    VT_REVERB_BRIGHTNESS_MODIFIER = 12,
    VT_REVERB_GAIN = 14,
    VT_REVERB_TIME = 16,
    VT_SURFACE_MATERIAL_WALL = 18,
    VT_SURFACE_MATERIAL_CEILING = 20,
    VT_SURFACE_MATERIAL_FLOOR = 22
  };
  /// One or more inputs that trigger this environment becoming the active audio
  /// environment.  See dispatcher_def.fbs for more information.
  const flatbuffers::Vector<flatbuffers::Offset<EventDef>> *set_environment_events() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<EventDef>> *>(VT_SET_ENVIRONMENT_EVENTS);
  }
  /// Whether or not to use this environment as soon as it is created.
  bool enable_on_create() const {
    return GetField<uint8_t>(VT_ENABLE_ON_CREATE, 0) != 0;
  }
  const Vec3 *room_dimensions() const {
    return GetStruct<const Vec3 *>(VT_ROOM_DIMENSIONS);
  }
  float reflection_scalar() const {
    return GetField<float>(VT_REFLECTION_SCALAR, 0.0f);
  }
  float reverb_brightness_modifier() const {
    return GetField<float>(VT_REVERB_BRIGHTNESS_MODIFIER, 0.0f);
  }
  float reverb_gain() const {
    return GetField<float>(VT_REVERB_GAIN, 0.0f);
  }
  float reverb_time() const {
    return GetField<float>(VT_REVERB_TIME, 0.0f);
  }
  AudioSurfaceMaterial surface_material_wall() const {
    return static_cast<AudioSurfaceMaterial>(GetField<int32_t>(VT_SURFACE_MATERIAL_WALL, 0));
  }
  AudioSurfaceMaterial surface_material_ceiling() const {
    return static_cast<AudioSurfaceMaterial>(GetField<int32_t>(VT_SURFACE_MATERIAL_CEILING, 0));
  }
  AudioSurfaceMaterial surface_material_floor() const {
    return static_cast<AudioSurfaceMaterial>(GetField<int32_t>(VT_SURFACE_MATERIAL_FLOOR, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SET_ENVIRONMENT_EVENTS) &&
           verifier.Verify(set_environment_events()) &&
           verifier.VerifyVectorOfTables(set_environment_events()) &&
           VerifyField<uint8_t>(verifier, VT_ENABLE_ON_CREATE) &&
           VerifyField<Vec3>(verifier, VT_ROOM_DIMENSIONS) &&
           VerifyField<float>(verifier, VT_REFLECTION_SCALAR) &&
           VerifyField<float>(verifier, VT_REVERB_BRIGHTNESS_MODIFIER) &&
           VerifyField<float>(verifier, VT_REVERB_GAIN) &&
           VerifyField<float>(verifier, VT_REVERB_TIME) &&
           VerifyField<int32_t>(verifier, VT_SURFACE_MATERIAL_WALL) &&
           VerifyField<int32_t>(verifier, VT_SURFACE_MATERIAL_CEILING) &&
           VerifyField<int32_t>(verifier, VT_SURFACE_MATERIAL_FLOOR) &&
           verifier.EndTable();
  }
};

struct AudioEnvironmentDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_set_environment_events(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<EventDef>>> set_environment_events) {
    fbb_.AddOffset(AudioEnvironmentDef::VT_SET_ENVIRONMENT_EVENTS, set_environment_events);
  }
  void add_enable_on_create(bool enable_on_create) {
    fbb_.AddElement<uint8_t>(AudioEnvironmentDef::VT_ENABLE_ON_CREATE, static_cast<uint8_t>(enable_on_create), 0);
  }
  void add_room_dimensions(const Vec3 *room_dimensions) {
    fbb_.AddStruct(AudioEnvironmentDef::VT_ROOM_DIMENSIONS, room_dimensions);
  }
  void add_reflection_scalar(float reflection_scalar) {
    fbb_.AddElement<float>(AudioEnvironmentDef::VT_REFLECTION_SCALAR, reflection_scalar, 0.0f);
  }
  void add_reverb_brightness_modifier(float reverb_brightness_modifier) {
    fbb_.AddElement<float>(AudioEnvironmentDef::VT_REVERB_BRIGHTNESS_MODIFIER, reverb_brightness_modifier, 0.0f);
  }
  void add_reverb_gain(float reverb_gain) {
    fbb_.AddElement<float>(AudioEnvironmentDef::VT_REVERB_GAIN, reverb_gain, 0.0f);
  }
  void add_reverb_time(float reverb_time) {
    fbb_.AddElement<float>(AudioEnvironmentDef::VT_REVERB_TIME, reverb_time, 0.0f);
  }
  void add_surface_material_wall(AudioSurfaceMaterial surface_material_wall) {
    fbb_.AddElement<int32_t>(AudioEnvironmentDef::VT_SURFACE_MATERIAL_WALL, static_cast<int32_t>(surface_material_wall), 0);
  }
  void add_surface_material_ceiling(AudioSurfaceMaterial surface_material_ceiling) {
    fbb_.AddElement<int32_t>(AudioEnvironmentDef::VT_SURFACE_MATERIAL_CEILING, static_cast<int32_t>(surface_material_ceiling), 0);
  }
  void add_surface_material_floor(AudioSurfaceMaterial surface_material_floor) {
    fbb_.AddElement<int32_t>(AudioEnvironmentDef::VT_SURFACE_MATERIAL_FLOOR, static_cast<int32_t>(surface_material_floor), 0);
  }
  explicit AudioEnvironmentDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AudioEnvironmentDefBuilder &operator=(const AudioEnvironmentDefBuilder &);
  flatbuffers::Offset<AudioEnvironmentDef> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AudioEnvironmentDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<AudioEnvironmentDef> CreateAudioEnvironmentDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<EventDef>>> set_environment_events = 0,
    bool enable_on_create = false,
    const Vec3 *room_dimensions = 0,
    float reflection_scalar = 0.0f,
    float reverb_brightness_modifier = 0.0f,
    float reverb_gain = 0.0f,
    float reverb_time = 0.0f,
    AudioSurfaceMaterial surface_material_wall = AudioSurfaceMaterial_Transparent,
    AudioSurfaceMaterial surface_material_ceiling = AudioSurfaceMaterial_Transparent,
    AudioSurfaceMaterial surface_material_floor = AudioSurfaceMaterial_Transparent) {
  AudioEnvironmentDefBuilder builder_(_fbb);
  builder_.add_surface_material_floor(surface_material_floor);
  builder_.add_surface_material_ceiling(surface_material_ceiling);
  builder_.add_surface_material_wall(surface_material_wall);
  builder_.add_reverb_time(reverb_time);
  builder_.add_reverb_gain(reverb_gain);
  builder_.add_reverb_brightness_modifier(reverb_brightness_modifier);
  builder_.add_reflection_scalar(reflection_scalar);
  builder_.add_room_dimensions(room_dimensions);
  builder_.add_set_environment_events(set_environment_events);
  builder_.add_enable_on_create(enable_on_create);
  return builder_.Finish();
}

inline flatbuffers::Offset<AudioEnvironmentDef> CreateAudioEnvironmentDefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<EventDef>> *set_environment_events = nullptr,
    bool enable_on_create = false,
    const Vec3 *room_dimensions = 0,
    float reflection_scalar = 0.0f,
    float reverb_brightness_modifier = 0.0f,
    float reverb_gain = 0.0f,
    float reverb_time = 0.0f,
    AudioSurfaceMaterial surface_material_wall = AudioSurfaceMaterial_Transparent,
    AudioSurfaceMaterial surface_material_ceiling = AudioSurfaceMaterial_Transparent,
    AudioSurfaceMaterial surface_material_floor = AudioSurfaceMaterial_Transparent) {
  return lull::CreateAudioEnvironmentDef(
      _fbb,
      set_environment_events ? _fbb.CreateVector<flatbuffers::Offset<EventDef>>(*set_environment_events) : 0,
      enable_on_create,
      room_dimensions,
      reflection_scalar,
      reverb_brightness_modifier,
      reverb_gain,
      reverb_time,
      surface_material_wall,
      surface_material_ceiling,
      surface_material_floor);
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_AUDIOENVIRONMENTDEF_LULL_H_
