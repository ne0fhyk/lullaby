// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUDIOPLAYBACKTYPES_LULL_H_
#define FLATBUFFERS_GENERATED_AUDIOPLAYBACKTYPES_LULL_H_

#include "flatbuffers/flatbuffers.h"

namespace lull {

/// How the audio engine should treat an audio source.
enum AudioSourceType {
  /// A non-spatialized, standard audio source.
  AudioSourceType_Standard = 0  /// A spatialized sound object.
,
  AudioSourceType_Spatialized = 1  /// A rotational sound field.
,
  AudioSourceType_Soundfield = 2,
  AudioSourceType_MIN = AudioSourceType_Standard,
  AudioSourceType_MAX = AudioSourceType_Soundfield
};

inline AudioSourceType (&EnumValuesAudioSourceType())[3] {
  static AudioSourceType values[] = {
    AudioSourceType_Standard,
    AudioSourceType_Spatialized,
    AudioSourceType_Soundfield
  };
  return values;
}

inline const char **EnumNamesAudioSourceType() {
  static const char *names[] = {
    "Standard",
    "Spatialized",
    "Soundfield",
    nullptr
  };
  return names;
}

inline const char *EnumNameAudioSourceType(AudioSourceType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesAudioSourceType()[index];
}

/// How a sound should be loaded and played.
enum AudioPlaybackType {
  /// Preload the sound. If something attempts to play the sound before it is
  /// done loading, skip playing the sound.
  AudioPlaybackType_PlayIfReady = 0  /// Preload the sound. If something attempts to play the sound before it is
  /// done loading, queue the sound to be played as soon as it is ready.
,
  AudioPlaybackType_PlayWhenReady = 1  /// Stream the sound.
,
  AudioPlaybackType_Stream = 2  /// Do not manage the playback of the sound. Only manage its other properties,
  /// such as volume and transform.
  /// This type should NEVER be used outside of the AudioSystem.
,
  AudioPlaybackType_External = 3,
  AudioPlaybackType_MIN = AudioPlaybackType_PlayIfReady,
  AudioPlaybackType_MAX = AudioPlaybackType_External
};

inline AudioPlaybackType (&EnumValuesAudioPlaybackType())[4] {
  static AudioPlaybackType values[] = {
    AudioPlaybackType_PlayIfReady,
    AudioPlaybackType_PlayWhenReady,
    AudioPlaybackType_Stream,
    AudioPlaybackType_External
  };
  return values;
}

inline const char **EnumNamesAudioPlaybackType() {
  static const char *names[] = {
    "PlayIfReady",
    "PlayWhenReady",
    "Stream",
    "External",
    nullptr
  };
  return names;
}

inline const char *EnumNameAudioPlaybackType(AudioPlaybackType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesAudioPlaybackType()[index];
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_AUDIOPLAYBACKTYPES_LULL_H_
