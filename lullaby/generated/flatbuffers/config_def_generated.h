// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONFIGDEF_LULL_H_
#define FLATBUFFERS_GENERATED_CONFIGDEF_LULL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "variant_def_generated.h"

namespace lull {

struct ConfigDef;

struct ConfigDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.ConfigDef";
  }
  enum {
    VT_VALUES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<KeyVariantPairDef>> *values() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<KeyVariantPairDef>> *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.Verify(values()) &&
           verifier.VerifyVectorOfTables(values()) &&
           verifier.EndTable();
  }
};

struct ConfigDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_values(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<KeyVariantPairDef>>> values) {
    fbb_.AddOffset(ConfigDef::VT_VALUES, values);
  }
  explicit ConfigDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ConfigDefBuilder &operator=(const ConfigDefBuilder &);
  flatbuffers::Offset<ConfigDef> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ConfigDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<ConfigDef> CreateConfigDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<KeyVariantPairDef>>> values = 0) {
  ConfigDefBuilder builder_(_fbb);
  builder_.add_values(values);
  return builder_.Finish();
}

inline flatbuffers::Offset<ConfigDef> CreateConfigDefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<KeyVariantPairDef>> *values = nullptr) {
  return lull::CreateConfigDef(
      _fbb,
      values ? _fbb.CreateVector<flatbuffers::Offset<KeyVariantPairDef>>(*values) : 0);
}

inline const lull::ConfigDef *GetConfigDef(const void *buf) {
  return flatbuffers::GetRoot<lull::ConfigDef>(buf);
}

inline bool VerifyConfigDefBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<lull::ConfigDef>(nullptr);
}

inline void FinishConfigDefBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<lull::ConfigDef> root) {
  fbb.Finish(root);
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_CONFIGDEF_LULL_H_
