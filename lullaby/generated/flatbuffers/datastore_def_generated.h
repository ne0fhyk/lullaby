// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATASTOREDEF_LULL_H_
#define FLATBUFFERS_GENERATED_DATASTOREDEF_LULL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "variant_def_generated.h"

namespace lull {

struct DatastoreDef;

struct DatastoreDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.DatastoreDef";
  }
  enum {
    VT_KEY_VALUE_PAIRS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<KeyVariantPairDef>> *key_value_pairs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<KeyVariantPairDef>> *>(VT_KEY_VALUE_PAIRS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY_VALUE_PAIRS) &&
           verifier.Verify(key_value_pairs()) &&
           verifier.VerifyVectorOfTables(key_value_pairs()) &&
           verifier.EndTable();
  }
};

struct DatastoreDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key_value_pairs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<KeyVariantPairDef>>> key_value_pairs) {
    fbb_.AddOffset(DatastoreDef::VT_KEY_VALUE_PAIRS, key_value_pairs);
  }
  explicit DatastoreDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DatastoreDefBuilder &operator=(const DatastoreDefBuilder &);
  flatbuffers::Offset<DatastoreDef> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DatastoreDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<DatastoreDef> CreateDatastoreDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<KeyVariantPairDef>>> key_value_pairs = 0) {
  DatastoreDefBuilder builder_(_fbb);
  builder_.add_key_value_pairs(key_value_pairs);
  return builder_.Finish();
}

inline flatbuffers::Offset<DatastoreDef> CreateDatastoreDefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<KeyVariantPairDef>> *key_value_pairs = nullptr) {
  return lull::CreateDatastoreDef(
      _fbb,
      key_value_pairs ? _fbb.CreateVector<flatbuffers::Offset<KeyVariantPairDef>>(*key_value_pairs) : 0);
}

inline const lull::DatastoreDef *GetDatastoreDef(const void *buf) {
  return flatbuffers::GetRoot<lull::DatastoreDef>(buf);
}

inline bool VerifyDatastoreDefBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<lull::DatastoreDef>(nullptr);
}

inline void FinishDatastoreDefBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<lull::DatastoreDef> root) {
  fbb.Finish(root);
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_DATASTOREDEF_LULL_H_
