// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DISPATCHERDEF_LULL_H_
#define FLATBUFFERS_GENERATED_DISPATCHERDEF_LULL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "variant_def_generated.h"

namespace lull {

struct EventDef;

struct EventResponseDef;

/// Describes an event used as an input/trigger for a response.  For example,
/// playing a sound when an Entity is clicked.
struct EventDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.EventDef";
  }
  enum {
    VT_EVENT = 4,
    VT_LOCAL = 6,
    VT_GLOBAL = 8,
    VT_VALUES = 10
  };
  /// The TypeName of the event (eg. "lull::ClickEvent").
  const flatbuffers::String *event() const {
    return GetPointer<const flatbuffers::String *>(VT_EVENT);
  }
  /// Whether to listen for the event on the DispatcherSystem on the Entity
  /// associated with the EventDef.
  bool local() const {
    return GetField<uint8_t>(VT_LOCAL, 0) != 0;
  }
  /// Whether to listen for the event on the "global" dispatcher.
  bool global() const {
    return GetField<uint8_t>(VT_GLOBAL, 0) != 0;
  }
  /// Key-value pairs of data for the event.
  /// A value of type "DataHashValue" with the string "$self" will get replaced
  /// with the entity value (stored as uint)
  const flatbuffers::Vector<flatbuffers::Offset<lull::KeyVariantPairDef>> *values() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<lull::KeyVariantPairDef>> *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENT) &&
           verifier.Verify(event()) &&
           VerifyField<uint8_t>(verifier, VT_LOCAL) &&
           VerifyField<uint8_t>(verifier, VT_GLOBAL) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.Verify(values()) &&
           verifier.VerifyVectorOfTables(values()) &&
           verifier.EndTable();
  }
};

struct EventDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_event(flatbuffers::Offset<flatbuffers::String> event) {
    fbb_.AddOffset(EventDef::VT_EVENT, event);
  }
  void add_local(bool local) {
    fbb_.AddElement<uint8_t>(EventDef::VT_LOCAL, static_cast<uint8_t>(local), 0);
  }
  void add_global(bool global) {
    fbb_.AddElement<uint8_t>(EventDef::VT_GLOBAL, static_cast<uint8_t>(global), 0);
  }
  void add_values(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<lull::KeyVariantPairDef>>> values) {
    fbb_.AddOffset(EventDef::VT_VALUES, values);
  }
  EventDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EventDefBuilder &operator=(const EventDefBuilder &);
  flatbuffers::Offset<EventDef> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<EventDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<EventDef> CreateEventDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> event = 0,
    bool local = false,
    bool global = false,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<lull::KeyVariantPairDef>>> values = 0) {
  EventDefBuilder builder_(_fbb);
  builder_.add_values(values);
  builder_.add_event(event);
  builder_.add_global(global);
  builder_.add_local(local);
  return builder_.Finish();
}

inline flatbuffers::Offset<EventDef> CreateEventDefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *event = nullptr,
    bool local = false,
    bool global = false,
    const std::vector<flatbuffers::Offset<lull::KeyVariantPairDef>> *values = nullptr) {
  return lull::CreateEventDef(
      _fbb,
      event ? _fbb.CreateString(event) : 0,
      local,
      global,
      values ? _fbb.CreateVector<flatbuffers::Offset<lull::KeyVariantPairDef>>(*values) : 0);
}

/// A response that fires off an event based on an input event.  The response
/// event is sent on both the global Dispatcher and the Entity-specific
/// Dispatcher in the DispatcherSystem.
struct EventResponseDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.EventResponseDef";
  }
  enum {
    VT_INPUTS = 4,
    VT_OUTPUTS = 6
  };
  /// One or more inputs that trigger the response.
  const flatbuffers::Vector<flatbuffers::Offset<EventDef>> *inputs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<EventDef>> *>(VT_INPUTS);
  }
  /// One or more events to be dispatched locally and / or globally.
  const flatbuffers::Vector<flatbuffers::Offset<EventDef>> *outputs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<EventDef>> *>(VT_OUTPUTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INPUTS) &&
           verifier.Verify(inputs()) &&
           verifier.VerifyVectorOfTables(inputs()) &&
           VerifyOffset(verifier, VT_OUTPUTS) &&
           verifier.Verify(outputs()) &&
           verifier.VerifyVectorOfTables(outputs()) &&
           verifier.EndTable();
  }
};

struct EventResponseDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_inputs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<EventDef>>> inputs) {
    fbb_.AddOffset(EventResponseDef::VT_INPUTS, inputs);
  }
  void add_outputs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<EventDef>>> outputs) {
    fbb_.AddOffset(EventResponseDef::VT_OUTPUTS, outputs);
  }
  EventResponseDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EventResponseDefBuilder &operator=(const EventResponseDefBuilder &);
  flatbuffers::Offset<EventResponseDef> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<EventResponseDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<EventResponseDef> CreateEventResponseDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<EventDef>>> inputs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<EventDef>>> outputs = 0) {
  EventResponseDefBuilder builder_(_fbb);
  builder_.add_outputs(outputs);
  builder_.add_inputs(inputs);
  return builder_.Finish();
}

inline flatbuffers::Offset<EventResponseDef> CreateEventResponseDefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<EventDef>> *inputs = nullptr,
    const std::vector<flatbuffers::Offset<EventDef>> *outputs = nullptr) {
  return lull::CreateEventResponseDef(
      _fbb,
      inputs ? _fbb.CreateVector<flatbuffers::Offset<EventDef>>(*inputs) : 0,
      outputs ? _fbb.CreateVector<flatbuffers::Offset<EventDef>>(*outputs) : 0);
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_DISPATCHERDEF_LULL_H_
