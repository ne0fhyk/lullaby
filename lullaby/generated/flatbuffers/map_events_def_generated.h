// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAPEVENTSDEF_LULL_H_
#define FLATBUFFERS_GENERATED_MAPEVENTSDEF_LULL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "dispatcher_def_generated.h"
#include "variant_def_generated.h"

namespace lull {

struct EventMapDef;

struct MapEventsToChildrenDef;

struct MapEventsToParentDef;

struct MapEventsToSiblingsDef;

struct MapEventsToGroupDef;

/// This captures all of the forwarding and mapping a MapEventsToXDef will
/// perform. It shouldn't be directly placed as a component.
struct EventMapDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.EventMapDef";
  }
  enum {
    VT_INPUT_EVENTS = 4,
    VT_OUTPUT_EVENTS = 6
  };
  /// These events will trigger the |output_events| to be sent to the target
  /// entities.
  const flatbuffers::Vector<flatbuffers::Offset<lull::EventDef>> *input_events() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<lull::EventDef>> *>(VT_INPUT_EVENTS);
  }
  /// These events will be sent to the target entities whenever |input_events|
  /// is received.
  const flatbuffers::Vector<flatbuffers::Offset<lull::EventDef>> *output_events() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<lull::EventDef>> *>(VT_OUTPUT_EVENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INPUT_EVENTS) &&
           verifier.Verify(input_events()) &&
           verifier.VerifyVectorOfTables(input_events()) &&
           VerifyOffset(verifier, VT_OUTPUT_EVENTS) &&
           verifier.Verify(output_events()) &&
           verifier.VerifyVectorOfTables(output_events()) &&
           verifier.EndTable();
  }
};

struct EventMapDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input_events(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<lull::EventDef>>> input_events) {
    fbb_.AddOffset(EventMapDef::VT_INPUT_EVENTS, input_events);
  }
  void add_output_events(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<lull::EventDef>>> output_events) {
    fbb_.AddOffset(EventMapDef::VT_OUTPUT_EVENTS, output_events);
  }
  EventMapDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EventMapDefBuilder &operator=(const EventMapDefBuilder &);
  flatbuffers::Offset<EventMapDef> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<EventMapDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<EventMapDef> CreateEventMapDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<lull::EventDef>>> input_events = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<lull::EventDef>>> output_events = 0) {
  EventMapDefBuilder builder_(_fbb);
  builder_.add_output_events(output_events);
  builder_.add_input_events(input_events);
  return builder_.Finish();
}

inline flatbuffers::Offset<EventMapDef> CreateEventMapDefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<lull::EventDef>> *input_events = nullptr,
    const std::vector<flatbuffers::Offset<lull::EventDef>> *output_events = nullptr) {
  return lull::CreateEventMapDef(
      _fbb,
      input_events ? _fbb.CreateVector<flatbuffers::Offset<lull::EventDef>>(*input_events) : 0,
      output_events ? _fbb.CreateVector<flatbuffers::Offset<lull::EventDef>>(*output_events) : 0);
}

/// Send events to the entity’s children.
struct MapEventsToChildrenDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.MapEventsToChildrenDef";
  }
  enum {
    VT_EVENTS = 4
  };
  const EventMapDef *events() const {
    return GetPointer<const EventMapDef *>(VT_EVENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENTS) &&
           verifier.VerifyTable(events()) &&
           verifier.EndTable();
  }
};

struct MapEventsToChildrenDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_events(flatbuffers::Offset<EventMapDef> events) {
    fbb_.AddOffset(MapEventsToChildrenDef::VT_EVENTS, events);
  }
  MapEventsToChildrenDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MapEventsToChildrenDefBuilder &operator=(const MapEventsToChildrenDefBuilder &);
  flatbuffers::Offset<MapEventsToChildrenDef> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<MapEventsToChildrenDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<MapEventsToChildrenDef> CreateMapEventsToChildrenDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<EventMapDef> events = 0) {
  MapEventsToChildrenDefBuilder builder_(_fbb);
  builder_.add_events(events);
  return builder_.Finish();
}

/// Send events to the entity’s parent
struct MapEventsToParentDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.MapEventsToParentDef";
  }
  enum {
    VT_EVENTS = 4
  };
  const EventMapDef *events() const {
    return GetPointer<const EventMapDef *>(VT_EVENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENTS) &&
           verifier.VerifyTable(events()) &&
           verifier.EndTable();
  }
};

struct MapEventsToParentDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_events(flatbuffers::Offset<EventMapDef> events) {
    fbb_.AddOffset(MapEventsToParentDef::VT_EVENTS, events);
  }
  MapEventsToParentDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MapEventsToParentDefBuilder &operator=(const MapEventsToParentDefBuilder &);
  flatbuffers::Offset<MapEventsToParentDef> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<MapEventsToParentDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<MapEventsToParentDef> CreateMapEventsToParentDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<EventMapDef> events = 0) {
  MapEventsToParentDefBuilder builder_(_fbb);
  builder_.add_events(events);
  return builder_.Finish();
}

/// Send events to the entity’s siblings, optionally including itself.
struct MapEventsToSiblingsDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.MapEventsToSiblingsDef";
  }
  enum {
    VT_EVENTS = 4,
    VT_INCLUDE_SELF = 6
  };
  const EventMapDef *events() const {
    return GetPointer<const EventMapDef *>(VT_EVENTS);
  }
  bool include_self() const {
    return GetField<uint8_t>(VT_INCLUDE_SELF, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENTS) &&
           verifier.VerifyTable(events()) &&
           VerifyField<uint8_t>(verifier, VT_INCLUDE_SELF) &&
           verifier.EndTable();
  }
};

struct MapEventsToSiblingsDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_events(flatbuffers::Offset<EventMapDef> events) {
    fbb_.AddOffset(MapEventsToSiblingsDef::VT_EVENTS, events);
  }
  void add_include_self(bool include_self) {
    fbb_.AddElement<uint8_t>(MapEventsToSiblingsDef::VT_INCLUDE_SELF, static_cast<uint8_t>(include_self), 0);
  }
  MapEventsToSiblingsDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MapEventsToSiblingsDefBuilder &operator=(const MapEventsToSiblingsDefBuilder &);
  flatbuffers::Offset<MapEventsToSiblingsDef> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<MapEventsToSiblingsDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<MapEventsToSiblingsDef> CreateMapEventsToSiblingsDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<EventMapDef> events = 0,
    bool include_self = false) {
  MapEventsToSiblingsDefBuilder builder_(_fbb);
  builder_.add_events(events);
  builder_.add_include_self(include_self);
  return builder_.Finish();
}

/// Send events to all entities that have a matching |group| string, optionally
/// including itself.
struct MapEventsToGroupDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.MapEventsToGroupDef";
  }
  enum {
    VT_GROUP = 4,
    VT_EVENTS = 6,
    VT_INCLUDE_SELF = 8
  };
  const flatbuffers::String *group() const {
    return GetPointer<const flatbuffers::String *>(VT_GROUP);
  }
  const EventMapDef *events() const {
    return GetPointer<const EventMapDef *>(VT_EVENTS);
  }
  bool include_self() const {
    return GetField<uint8_t>(VT_INCLUDE_SELF, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GROUP) &&
           verifier.Verify(group()) &&
           VerifyOffset(verifier, VT_EVENTS) &&
           verifier.VerifyTable(events()) &&
           VerifyField<uint8_t>(verifier, VT_INCLUDE_SELF) &&
           verifier.EndTable();
  }
};

struct MapEventsToGroupDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_group(flatbuffers::Offset<flatbuffers::String> group) {
    fbb_.AddOffset(MapEventsToGroupDef::VT_GROUP, group);
  }
  void add_events(flatbuffers::Offset<EventMapDef> events) {
    fbb_.AddOffset(MapEventsToGroupDef::VT_EVENTS, events);
  }
  void add_include_self(bool include_self) {
    fbb_.AddElement<uint8_t>(MapEventsToGroupDef::VT_INCLUDE_SELF, static_cast<uint8_t>(include_self), 0);
  }
  MapEventsToGroupDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MapEventsToGroupDefBuilder &operator=(const MapEventsToGroupDefBuilder &);
  flatbuffers::Offset<MapEventsToGroupDef> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<MapEventsToGroupDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<MapEventsToGroupDef> CreateMapEventsToGroupDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> group = 0,
    flatbuffers::Offset<EventMapDef> events = 0,
    bool include_self = false) {
  MapEventsToGroupDefBuilder builder_(_fbb);
  builder_.add_events(events);
  builder_.add_group(group);
  builder_.add_include_self(include_self);
  return builder_.Finish();
}

inline flatbuffers::Offset<MapEventsToGroupDef> CreateMapEventsToGroupDefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *group = nullptr,
    flatbuffers::Offset<EventMapDef> events = 0,
    bool include_self = false) {
  return lull::CreateMapEventsToGroupDef(
      _fbb,
      group ? _fbb.CreateString(group) : 0,
      events,
      include_self);
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_MAPEVENTSDEF_LULL_H_
