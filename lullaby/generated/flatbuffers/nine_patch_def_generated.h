// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NINEPATCHDEF_LULL_H_
#define FLATBUFFERS_GENERATED_NINEPATCHDEF_LULL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace lull {

struct NinePatchDef;

struct NinePatchDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.NinePatchDef";
  }
  enum {
    VT_SIZE = 4,
    VT_LEFT_SLICE = 6,
    VT_RIGHT_SLICE = 8,
    VT_BOTTOM_SLICE = 10,
    VT_TOP_SLICE = 12,
    VT_ORIGINAL_SIZE = 14,
    VT_SUBDIVISIONS = 16
  };
  const lull::Vec2 *size() const {
    return GetStruct<const lull::Vec2 *>(VT_SIZE);
  }
  float left_slice() const {
    return GetField<float>(VT_LEFT_SLICE, 0.0f);
  }
  float right_slice() const {
    return GetField<float>(VT_RIGHT_SLICE, 0.0f);
  }
  float bottom_slice() const {
    return GetField<float>(VT_BOTTOM_SLICE, 0.0f);
  }
  float top_slice() const {
    return GetField<float>(VT_TOP_SLICE, 0.0f);
  }
  const lull::Vec2 *original_size() const {
    return GetStruct<const lull::Vec2 *>(VT_ORIGINAL_SIZE);
  }
  const lull::Vec2i *subdivisions() const {
    return GetStruct<const lull::Vec2i *>(VT_SUBDIVISIONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<lull::Vec2>(verifier, VT_SIZE) &&
           VerifyField<float>(verifier, VT_LEFT_SLICE) &&
           VerifyField<float>(verifier, VT_RIGHT_SLICE) &&
           VerifyField<float>(verifier, VT_BOTTOM_SLICE) &&
           VerifyField<float>(verifier, VT_TOP_SLICE) &&
           VerifyField<lull::Vec2>(verifier, VT_ORIGINAL_SIZE) &&
           VerifyField<lull::Vec2i>(verifier, VT_SUBDIVISIONS) &&
           verifier.EndTable();
  }
};

struct NinePatchDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_size(const lull::Vec2 *size) {
    fbb_.AddStruct(NinePatchDef::VT_SIZE, size);
  }
  void add_left_slice(float left_slice) {
    fbb_.AddElement<float>(NinePatchDef::VT_LEFT_SLICE, left_slice, 0.0f);
  }
  void add_right_slice(float right_slice) {
    fbb_.AddElement<float>(NinePatchDef::VT_RIGHT_SLICE, right_slice, 0.0f);
  }
  void add_bottom_slice(float bottom_slice) {
    fbb_.AddElement<float>(NinePatchDef::VT_BOTTOM_SLICE, bottom_slice, 0.0f);
  }
  void add_top_slice(float top_slice) {
    fbb_.AddElement<float>(NinePatchDef::VT_TOP_SLICE, top_slice, 0.0f);
  }
  void add_original_size(const lull::Vec2 *original_size) {
    fbb_.AddStruct(NinePatchDef::VT_ORIGINAL_SIZE, original_size);
  }
  void add_subdivisions(const lull::Vec2i *subdivisions) {
    fbb_.AddStruct(NinePatchDef::VT_SUBDIVISIONS, subdivisions);
  }
  NinePatchDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NinePatchDefBuilder &operator=(const NinePatchDefBuilder &);
  flatbuffers::Offset<NinePatchDef> Finish() {
    const auto end = fbb_.EndTable(start_, 7);
    auto o = flatbuffers::Offset<NinePatchDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<NinePatchDef> CreateNinePatchDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    const lull::Vec2 *size = 0,
    float left_slice = 0.0f,
    float right_slice = 0.0f,
    float bottom_slice = 0.0f,
    float top_slice = 0.0f,
    const lull::Vec2 *original_size = 0,
    const lull::Vec2i *subdivisions = 0) {
  NinePatchDefBuilder builder_(_fbb);
  builder_.add_subdivisions(subdivisions);
  builder_.add_original_size(original_size);
  builder_.add_top_slice(top_slice);
  builder_.add_bottom_slice(bottom_slice);
  builder_.add_right_slice(right_slice);
  builder_.add_left_slice(left_slice);
  builder_.add_size(size);
  return builder_.Finish();
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_NINEPATCHDEF_LULL_H_
