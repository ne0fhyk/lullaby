// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PHYSICSSHAPES_LULL_H_
#define FLATBUFFERS_GENERATED_PHYSICSSHAPES_LULL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace lull {

struct PhysicsBoxShape;

struct PhysicsSphereShape;

struct PhysicsShapePart;

/// Defines the types of primitive shapes that the simulation supports.
enum PhysicsShapePrimitive {
  PhysicsShapePrimitive_NONE = 0,
  PhysicsShapePrimitive_PhysicsBoxShape = 1,
  PhysicsShapePrimitive_PhysicsSphereShape = 2,
  PhysicsShapePrimitive_MIN = PhysicsShapePrimitive_NONE,
  PhysicsShapePrimitive_MAX = PhysicsShapePrimitive_PhysicsSphereShape
};

inline PhysicsShapePrimitive (&EnumValuesPhysicsShapePrimitive())[3] {
  static PhysicsShapePrimitive values[] = {
    PhysicsShapePrimitive_NONE,
    PhysicsShapePrimitive_PhysicsBoxShape,
    PhysicsShapePrimitive_PhysicsSphereShape
  };
  return values;
}

inline const char **EnumNamesPhysicsShapePrimitive() {
  static const char *names[] = {
    "NONE",
    "PhysicsBoxShape",
    "PhysicsSphereShape",
    nullptr
  };
  return names;
}

inline const char *EnumNamePhysicsShapePrimitive(PhysicsShapePrimitive e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPhysicsShapePrimitive()[index];
}

template<typename T> struct PhysicsShapePrimitiveTraits {
  static const PhysicsShapePrimitive enum_value = PhysicsShapePrimitive_NONE;
};

template<> struct PhysicsShapePrimitiveTraits<PhysicsBoxShape> {
  static const PhysicsShapePrimitive enum_value = PhysicsShapePrimitive_PhysicsBoxShape;
};

template<> struct PhysicsShapePrimitiveTraits<PhysicsSphereShape> {
  static const PhysicsShapePrimitive enum_value = PhysicsShapePrimitive_PhysicsSphereShape;
};

bool VerifyPhysicsShapePrimitive(flatbuffers::Verifier &verifier, const void *obj, PhysicsShapePrimitive type);
bool VerifyPhysicsShapePrimitiveVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct PhysicsBoxShape FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.PhysicsBoxShape";
  }
  enum {
    VT_HALF_DIMENSIONS = 4
  };
  /// The positive XYZ dimensions of the shape will be mirrored in negative XYZ.
  const lull::Vec3 *half_dimensions() const {
    return GetStruct<const lull::Vec3 *>(VT_HALF_DIMENSIONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<lull::Vec3>(verifier, VT_HALF_DIMENSIONS) &&
           verifier.EndTable();
  }
};

struct PhysicsBoxShapeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_half_dimensions(const lull::Vec3 *half_dimensions) {
    fbb_.AddStruct(PhysicsBoxShape::VT_HALF_DIMENSIONS, half_dimensions);
  }
  PhysicsBoxShapeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PhysicsBoxShapeBuilder &operator=(const PhysicsBoxShapeBuilder &);
  flatbuffers::Offset<PhysicsBoxShape> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<PhysicsBoxShape>(end);
    return o;
  }
};

inline flatbuffers::Offset<PhysicsBoxShape> CreatePhysicsBoxShape(
    flatbuffers::FlatBufferBuilder &_fbb,
    const lull::Vec3 *half_dimensions = 0) {
  PhysicsBoxShapeBuilder builder_(_fbb);
  builder_.add_half_dimensions(half_dimensions);
  return builder_.Finish();
}

/// A sphere with non-uniform scale will result in an ellipsoid.
struct PhysicsSphereShape FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.PhysicsSphereShape";
  }
  enum {
    VT_RADIUS = 4
  };
  float radius() const {
    return GetField<float>(VT_RADIUS, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_RADIUS) &&
           verifier.EndTable();
  }
};

struct PhysicsSphereShapeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_radius(float radius) {
    fbb_.AddElement<float>(PhysicsSphereShape::VT_RADIUS, radius, 0.0f);
  }
  PhysicsSphereShapeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PhysicsSphereShapeBuilder &operator=(const PhysicsSphereShapeBuilder &);
  flatbuffers::Offset<PhysicsSphereShape> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<PhysicsSphereShape>(end);
    return o;
  }
};

inline flatbuffers::Offset<PhysicsSphereShape> CreatePhysicsSphereShape(
    flatbuffers::FlatBufferBuilder &_fbb,
    float radius = 0.0f) {
  PhysicsSphereShapeBuilder builder_(_fbb);
  builder_.add_radius(radius);
  return builder_.Finish();
}

/// Wraps a primitive collision shape and a transformation to apply to it. The
/// local transforms are used to offset shapes from the Entity's position.
struct PhysicsShapePart FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.PhysicsShapePart";
  }
  enum {
    VT_SHAPE_TYPE = 4,
    VT_SHAPE = 6,
    VT_TRANSLATION = 8,
    VT_ROTATION = 10,
    VT_SCALE = 12
  };
  PhysicsShapePrimitive shape_type() const {
    return static_cast<PhysicsShapePrimitive>(GetField<uint8_t>(VT_SHAPE_TYPE, 0));
  }
  /// The collision shape.
  const void *shape() const {
    return GetPointer<const void *>(VT_SHAPE);
  }
  template<typename T> const T *shape_as() const;
  const PhysicsBoxShape *shape_as_PhysicsBoxShape() const {
    return shape_type() == PhysicsShapePrimitive_PhysicsBoxShape ? static_cast<const PhysicsBoxShape *>(shape()) : nullptr;
  }
  const PhysicsSphereShape *shape_as_PhysicsSphereShape() const {
    return shape_type() == PhysicsShapePrimitive_PhysicsSphereShape ? static_cast<const PhysicsSphereShape *>(shape()) : nullptr;
  }
  /// The local translation for this shape's centroid.
  const lull::Vec3 *translation() const {
    return GetStruct<const lull::Vec3 *>(VT_TRANSLATION);
  }
  /// The local rotation for this shape's centroid.
  const lull::Vec3 *rotation() const {
    return GetStruct<const lull::Vec3 *>(VT_ROTATION);
  }
  /// The local scale for this shape.
  const lull::Vec3 *scale() const {
    return GetStruct<const lull::Vec3 *>(VT_SCALE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SHAPE_TYPE) &&
           VerifyOffset(verifier, VT_SHAPE) &&
           VerifyPhysicsShapePrimitive(verifier, shape(), shape_type()) &&
           VerifyField<lull::Vec3>(verifier, VT_TRANSLATION) &&
           VerifyField<lull::Vec3>(verifier, VT_ROTATION) &&
           VerifyField<lull::Vec3>(verifier, VT_SCALE) &&
           verifier.EndTable();
  }
};

template<> inline const PhysicsBoxShape *PhysicsShapePart::shape_as<PhysicsBoxShape>() const {
  return shape_as_PhysicsBoxShape();
}

template<> inline const PhysicsSphereShape *PhysicsShapePart::shape_as<PhysicsSphereShape>() const {
  return shape_as_PhysicsSphereShape();
}

struct PhysicsShapePartBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_shape_type(PhysicsShapePrimitive shape_type) {
    fbb_.AddElement<uint8_t>(PhysicsShapePart::VT_SHAPE_TYPE, static_cast<uint8_t>(shape_type), 0);
  }
  void add_shape(flatbuffers::Offset<void> shape) {
    fbb_.AddOffset(PhysicsShapePart::VT_SHAPE, shape);
  }
  void add_translation(const lull::Vec3 *translation) {
    fbb_.AddStruct(PhysicsShapePart::VT_TRANSLATION, translation);
  }
  void add_rotation(const lull::Vec3 *rotation) {
    fbb_.AddStruct(PhysicsShapePart::VT_ROTATION, rotation);
  }
  void add_scale(const lull::Vec3 *scale) {
    fbb_.AddStruct(PhysicsShapePart::VT_SCALE, scale);
  }
  PhysicsShapePartBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PhysicsShapePartBuilder &operator=(const PhysicsShapePartBuilder &);
  flatbuffers::Offset<PhysicsShapePart> Finish() {
    const auto end = fbb_.EndTable(start_, 5);
    auto o = flatbuffers::Offset<PhysicsShapePart>(end);
    return o;
  }
};

inline flatbuffers::Offset<PhysicsShapePart> CreatePhysicsShapePart(
    flatbuffers::FlatBufferBuilder &_fbb,
    PhysicsShapePrimitive shape_type = PhysicsShapePrimitive_NONE,
    flatbuffers::Offset<void> shape = 0,
    const lull::Vec3 *translation = 0,
    const lull::Vec3 *rotation = 0,
    const lull::Vec3 *scale = 0) {
  PhysicsShapePartBuilder builder_(_fbb);
  builder_.add_scale(scale);
  builder_.add_rotation(rotation);
  builder_.add_translation(translation);
  builder_.add_shape(shape);
  builder_.add_shape_type(shape_type);
  return builder_.Finish();
}

inline bool VerifyPhysicsShapePrimitive(flatbuffers::Verifier &verifier, const void *obj, PhysicsShapePrimitive type) {
  switch (type) {
    case PhysicsShapePrimitive_NONE: {
      return true;
    }
    case PhysicsShapePrimitive_PhysicsBoxShape: {
      auto ptr = reinterpret_cast<const PhysicsBoxShape *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PhysicsShapePrimitive_PhysicsSphereShape: {
      auto ptr = reinterpret_cast<const PhysicsSphereShape *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyPhysicsShapePrimitiveVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPhysicsShapePrimitive(
        verifier,  values->Get(i), types->GetEnum<PhysicsShapePrimitive>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_PHYSICSSHAPES_LULL_H_
