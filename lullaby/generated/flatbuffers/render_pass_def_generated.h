// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RENDERPASSDEF_LULL_H_
#define FLATBUFFERS_GENERATED_RENDERPASSDEF_LULL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "render_state_def_generated.h"

namespace lull {

struct RenderPassDef;

enum SortMode {
  SortMode_None = 0  /// sort values.
,
  SortMode_SortOrderDecreasing = 1,
  SortMode_SortOrderIncreasing = 2,
  SortMode_WorldSpaceZBackToFront = 3,
  SortMode_WorldSpaceZFrontToBack = 4,
  SortMode_AverageSpaceOriginBackToFront = 5,
  SortMode_AverageSpaceOriginFrontToBack = 6,
  SortMode_Optimized = 7,
  SortMode_MIN = SortMode_None,
  SortMode_MAX = SortMode_Optimized
};

inline SortMode (&EnumValuesSortMode())[8] {
  static SortMode values[] = {
    SortMode_None,
    SortMode_SortOrderDecreasing,
    SortMode_SortOrderIncreasing,
    SortMode_WorldSpaceZBackToFront,
    SortMode_WorldSpaceZFrontToBack,
    SortMode_AverageSpaceOriginBackToFront,
    SortMode_AverageSpaceOriginFrontToBack,
    SortMode_Optimized
  };
  return values;
}

inline const char **EnumNamesSortMode() {
  static const char *names[] = {
    "None",
    "SortOrderDecreasing",
    "SortOrderIncreasing",
    "WorldSpaceZBackToFront",
    "WorldSpaceZFrontToBack",
    "AverageSpaceOriginBackToFront",
    "AverageSpaceOriginFrontToBack",
    "Optimized",
    nullptr
  };
  return names;
}

inline const char *EnumNameSortMode(SortMode e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesSortMode()[index];
}

struct RenderPassDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.RenderPassDef";
  }
  enum {
    VT_NAME = 4,
    VT_RENDER_STATE = 6,
    VT_SORT_MODE = 8,
    VT_RENDER_TARGET_REF = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const RenderState *render_state() const {
    return GetPointer<const RenderState *>(VT_RENDER_STATE);
  }
  SortMode sort_mode() const {
    return static_cast<SortMode>(GetField<uint16_t>(VT_SORT_MODE, 0));
  }
  const flatbuffers::String *render_target_ref() const {
    return GetPointer<const flatbuffers::String *>(VT_RENDER_TARGET_REF);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_RENDER_STATE) &&
           verifier.VerifyTable(render_state()) &&
           VerifyField<uint16_t>(verifier, VT_SORT_MODE) &&
           VerifyOffset(verifier, VT_RENDER_TARGET_REF) &&
           verifier.Verify(render_target_ref()) &&
           verifier.EndTable();
  }
};

struct RenderPassDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(RenderPassDef::VT_NAME, name);
  }
  void add_render_state(flatbuffers::Offset<RenderState> render_state) {
    fbb_.AddOffset(RenderPassDef::VT_RENDER_STATE, render_state);
  }
  void add_sort_mode(SortMode sort_mode) {
    fbb_.AddElement<uint16_t>(RenderPassDef::VT_SORT_MODE, static_cast<uint16_t>(sort_mode), 0);
  }
  void add_render_target_ref(flatbuffers::Offset<flatbuffers::String> render_target_ref) {
    fbb_.AddOffset(RenderPassDef::VT_RENDER_TARGET_REF, render_target_ref);
  }
  explicit RenderPassDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RenderPassDefBuilder &operator=(const RenderPassDefBuilder &);
  flatbuffers::Offset<RenderPassDef> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RenderPassDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<RenderPassDef> CreateRenderPassDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<RenderState> render_state = 0,
    SortMode sort_mode = SortMode_None,
    flatbuffers::Offset<flatbuffers::String> render_target_ref = 0) {
  RenderPassDefBuilder builder_(_fbb);
  builder_.add_render_target_ref(render_target_ref);
  builder_.add_render_state(render_state);
  builder_.add_name(name);
  builder_.add_sort_mode(sort_mode);
  return builder_.Finish();
}

inline flatbuffers::Offset<RenderPassDef> CreateRenderPassDefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatbuffers::Offset<RenderState> render_state = 0,
    SortMode sort_mode = SortMode_None,
    const char *render_target_ref = nullptr) {
  return lull::CreateRenderPassDef(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      render_state,
      sort_mode,
      render_target_ref ? _fbb.CreateString(render_target_ref) : 0);
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_RENDERPASSDEF_LULL_H_
