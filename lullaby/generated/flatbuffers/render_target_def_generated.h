// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RENDERTARGETDEF_LULL_H_
#define FLATBUFFERS_GENERATED_RENDERTARGETDEF_LULL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace lull {

struct RenderTargetDef;

enum TextureFormat {
  TextureFormat_None = 0,
  TextureFormat_A8 = 1,
  TextureFormat_R8 = 2,
  TextureFormat_RGB8 = 3,
  TextureFormat_RGBA8 = 4,
  TextureFormat_Depth16 = 5,
  TextureFormat_Depth32F = 6,
  TextureFormat_MIN = TextureFormat_None,
  TextureFormat_MAX = TextureFormat_Depth32F
};

inline TextureFormat (&EnumValuesTextureFormat())[7] {
  static TextureFormat values[] = {
    TextureFormat_None,
    TextureFormat_A8,
    TextureFormat_R8,
    TextureFormat_RGB8,
    TextureFormat_RGBA8,
    TextureFormat_Depth16,
    TextureFormat_Depth32F
  };
  return values;
}

inline const char **EnumNamesTextureFormat() {
  static const char *names[] = {
    "None",
    "A8",
    "R8",
    "RGB8",
    "RGBA8",
    "Depth16",
    "Depth32F",
    nullptr
  };
  return names;
}

inline const char *EnumNameTextureFormat(TextureFormat e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesTextureFormat()[index];
}

enum DepthStencilFormat {
  DepthStencilFormat_None = 0,
  DepthStencilFormat_Depth16 = 1,
  DepthStencilFormat_Depth24 = 2,
  DepthStencilFormat_Depth32F = 3,
  DepthStencilFormat_Depth24Stencil8 = 4,
  DepthStencilFormat_Depth32FStencil8 = 5,
  DepthStencilFormat_Stencil8 = 6,
  DepthStencilFormat_MIN = DepthStencilFormat_None,
  DepthStencilFormat_MAX = DepthStencilFormat_Stencil8
};

inline DepthStencilFormat (&EnumValuesDepthStencilFormat())[7] {
  static DepthStencilFormat values[] = {
    DepthStencilFormat_None,
    DepthStencilFormat_Depth16,
    DepthStencilFormat_Depth24,
    DepthStencilFormat_Depth32F,
    DepthStencilFormat_Depth24Stencil8,
    DepthStencilFormat_Depth32FStencil8,
    DepthStencilFormat_Stencil8
  };
  return values;
}

inline const char **EnumNamesDepthStencilFormat() {
  static const char *names[] = {
    "None",
    "Depth16",
    "Depth24",
    "Depth32F",
    "Depth24Stencil8",
    "Depth32FStencil8",
    "Stencil8",
    nullptr
  };
  return names;
}

inline const char *EnumNameDepthStencilFormat(DepthStencilFormat e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDepthStencilFormat()[index];
}

struct RenderTargetDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.RenderTargetDef";
  }
  enum {
    VT_NAME = 4,
    VT_SIZE = 6,
    VT_TEXTURE_FORMAT = 8,
    VT_DEPTH_STENCIL_FORMAT = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const Vec2i *size() const {
    return GetStruct<const Vec2i *>(VT_SIZE);
  }
  TextureFormat texture_format() const {
    return static_cast<TextureFormat>(GetField<uint16_t>(VT_TEXTURE_FORMAT, 4));
  }
  DepthStencilFormat depth_stencil_format() const {
    return static_cast<DepthStencilFormat>(GetField<uint16_t>(VT_DEPTH_STENCIL_FORMAT, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<Vec2i>(verifier, VT_SIZE) &&
           VerifyField<uint16_t>(verifier, VT_TEXTURE_FORMAT) &&
           VerifyField<uint16_t>(verifier, VT_DEPTH_STENCIL_FORMAT) &&
           verifier.EndTable();
  }
};

struct RenderTargetDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(RenderTargetDef::VT_NAME, name);
  }
  void add_size(const Vec2i *size) {
    fbb_.AddStruct(RenderTargetDef::VT_SIZE, size);
  }
  void add_texture_format(TextureFormat texture_format) {
    fbb_.AddElement<uint16_t>(RenderTargetDef::VT_TEXTURE_FORMAT, static_cast<uint16_t>(texture_format), 4);
  }
  void add_depth_stencil_format(DepthStencilFormat depth_stencil_format) {
    fbb_.AddElement<uint16_t>(RenderTargetDef::VT_DEPTH_STENCIL_FORMAT, static_cast<uint16_t>(depth_stencil_format), 0);
  }
  explicit RenderTargetDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RenderTargetDefBuilder &operator=(const RenderTargetDefBuilder &);
  flatbuffers::Offset<RenderTargetDef> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RenderTargetDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<RenderTargetDef> CreateRenderTargetDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    const Vec2i *size = 0,
    TextureFormat texture_format = TextureFormat_RGBA8,
    DepthStencilFormat depth_stencil_format = DepthStencilFormat_None) {
  RenderTargetDefBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_name(name);
  builder_.add_depth_stencil_format(depth_stencil_format);
  builder_.add_texture_format(texture_format);
  return builder_.Finish();
}

inline flatbuffers::Offset<RenderTargetDef> CreateRenderTargetDefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const Vec2i *size = 0,
    TextureFormat texture_format = TextureFormat_RGBA8,
    DepthStencilFormat depth_stencil_format = DepthStencilFormat_None) {
  return lull::CreateRenderTargetDef(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      size,
      texture_format,
      depth_stencil_format);
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_RENDERTARGETDEF_LULL_H_
