// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCRIPTDEF_LULL_H_
#define FLATBUFFERS_GENERATED_SCRIPTDEF_LULL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "dispatcher_def_generated.h"
#include "variant_def_generated.h"

namespace lull {

struct ScriptDef;

struct ScriptOnEventDef;

struct ScriptEveryFrameDef;

struct ScriptOnCreateDef;

struct ScriptOnPostCreateInitDef;

struct ScriptOnDestroyDef;

/// The language of the script.
enum Language {
  Language_Unknown = 0,
  Language_LullScript = 1,
  Language_Lua5_2 = 2,
  Language_JavaScript = 3,
  Language_MIN = Language_Unknown,
  Language_MAX = Language_JavaScript
};

inline Language (&EnumValuesLanguage())[4] {
  static Language values[] = {
    Language_Unknown,
    Language_LullScript,
    Language_Lua5_2,
    Language_JavaScript
  };
  return values;
}

inline const char **EnumNamesLanguage() {
  static const char *names[] = {
    "Unknown",
    "LullScript",
    "Lua5_2",
    "JavaScript",
    nullptr
  };
  return names;
}

inline const char *EnumNameLanguage(Language e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesLanguage()[index];
}

/// Specifies a script.
struct ScriptDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.ScriptDef";
  }
  enum {
    VT_FILENAME = 4,
    VT_CODE = 6,
    VT_DEBUG_NAME = 8,
    VT_LANGUAGE = 10
  };
  /// The file name of the script.
  const flatbuffers::String *filename() const {
    return GetPointer<const flatbuffers::String *>(VT_FILENAME);
  }
  /// Inline script code (don't specify both this and the filename).
  const flatbuffers::String *code() const {
    return GetPointer<const flatbuffers::String *>(VT_CODE);
  }
  /// The debug_name is used when reporting errors for inline scripts. Defaults
  /// to the filename for scripts loaded from a file.
  const flatbuffers::String *debug_name() const {
    return GetPointer<const flatbuffers::String *>(VT_DEBUG_NAME);
  }
  /// The script language. This is optional if loading a script from a file (the
  /// language can be inferred from the file extension), but for inline code it
  /// must be specified.
  Language language() const {
    return static_cast<Language>(GetField<int32_t>(VT_LANGUAGE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.Verify(filename()) &&
           VerifyOffset(verifier, VT_CODE) &&
           verifier.Verify(code()) &&
           VerifyOffset(verifier, VT_DEBUG_NAME) &&
           verifier.Verify(debug_name()) &&
           VerifyField<int32_t>(verifier, VT_LANGUAGE) &&
           verifier.EndTable();
  }
};

struct ScriptDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_filename(flatbuffers::Offset<flatbuffers::String> filename) {
    fbb_.AddOffset(ScriptDef::VT_FILENAME, filename);
  }
  void add_code(flatbuffers::Offset<flatbuffers::String> code) {
    fbb_.AddOffset(ScriptDef::VT_CODE, code);
  }
  void add_debug_name(flatbuffers::Offset<flatbuffers::String> debug_name) {
    fbb_.AddOffset(ScriptDef::VT_DEBUG_NAME, debug_name);
  }
  void add_language(Language language) {
    fbb_.AddElement<int32_t>(ScriptDef::VT_LANGUAGE, static_cast<int32_t>(language), 0);
  }
  ScriptDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ScriptDefBuilder &operator=(const ScriptDefBuilder &);
  flatbuffers::Offset<ScriptDef> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<ScriptDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<ScriptDef> CreateScriptDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> filename = 0,
    flatbuffers::Offset<flatbuffers::String> code = 0,
    flatbuffers::Offset<flatbuffers::String> debug_name = 0,
    Language language = Language_Unknown) {
  ScriptDefBuilder builder_(_fbb);
  builder_.add_language(language);
  builder_.add_debug_name(debug_name);
  builder_.add_code(code);
  builder_.add_filename(filename);
  return builder_.Finish();
}

inline flatbuffers::Offset<ScriptDef> CreateScriptDefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *filename = nullptr,
    const char *code = nullptr,
    const char *debug_name = nullptr,
    Language language = Language_Unknown) {
  return lull::CreateScriptDef(
      _fbb,
      filename ? _fbb.CreateString(filename) : 0,
      code ? _fbb.CreateString(code) : 0,
      debug_name ? _fbb.CreateString(debug_name) : 0,
      language);
}

/// Specifies a script to be run every time an event fires.
struct ScriptOnEventDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.ScriptOnEventDef";
  }
  enum {
    VT_INPUTS = 4,
    VT_SCRIPT = 6
  };
  /// One or more events that trigger the script.
  const flatbuffers::Vector<flatbuffers::Offset<lull::EventDef>> *inputs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<lull::EventDef>> *>(VT_INPUTS);
  }
  /// The script to run.
  const ScriptDef *script() const {
    return GetPointer<const ScriptDef *>(VT_SCRIPT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INPUTS) &&
           verifier.Verify(inputs()) &&
           verifier.VerifyVectorOfTables(inputs()) &&
           VerifyOffset(verifier, VT_SCRIPT) &&
           verifier.VerifyTable(script()) &&
           verifier.EndTable();
  }
};

struct ScriptOnEventDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_inputs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<lull::EventDef>>> inputs) {
    fbb_.AddOffset(ScriptOnEventDef::VT_INPUTS, inputs);
  }
  void add_script(flatbuffers::Offset<ScriptDef> script) {
    fbb_.AddOffset(ScriptOnEventDef::VT_SCRIPT, script);
  }
  ScriptOnEventDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ScriptOnEventDefBuilder &operator=(const ScriptOnEventDefBuilder &);
  flatbuffers::Offset<ScriptOnEventDef> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<ScriptOnEventDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<ScriptOnEventDef> CreateScriptOnEventDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<lull::EventDef>>> inputs = 0,
    flatbuffers::Offset<ScriptDef> script = 0) {
  ScriptOnEventDefBuilder builder_(_fbb);
  builder_.add_script(script);
  builder_.add_inputs(inputs);
  return builder_.Finish();
}

inline flatbuffers::Offset<ScriptOnEventDef> CreateScriptOnEventDefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<lull::EventDef>> *inputs = nullptr,
    flatbuffers::Offset<ScriptDef> script = 0) {
  return lull::CreateScriptOnEventDef(
      _fbb,
      inputs ? _fbb.CreateVector<flatbuffers::Offset<lull::EventDef>>(*inputs) : 0,
      script);
}

/// Specifies a script to be run every frame.
struct ScriptEveryFrameDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.ScriptEveryFrameDef";
  }
  enum {
    VT_SCRIPT = 4
  };
  /// The script to run.
  const ScriptDef *script() const {
    return GetPointer<const ScriptDef *>(VT_SCRIPT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SCRIPT) &&
           verifier.VerifyTable(script()) &&
           verifier.EndTable();
  }
};

struct ScriptEveryFrameDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_script(flatbuffers::Offset<ScriptDef> script) {
    fbb_.AddOffset(ScriptEveryFrameDef::VT_SCRIPT, script);
  }
  ScriptEveryFrameDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ScriptEveryFrameDefBuilder &operator=(const ScriptEveryFrameDefBuilder &);
  flatbuffers::Offset<ScriptEveryFrameDef> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<ScriptEveryFrameDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<ScriptEveryFrameDef> CreateScriptEveryFrameDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ScriptDef> script = 0) {
  ScriptEveryFrameDefBuilder builder_(_fbb);
  builder_.add_script(script);
  return builder_.Finish();
}

/// Specifies a script to be run when the entity is created.
struct ScriptOnCreateDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.ScriptOnCreateDef";
  }
  enum {
    VT_SCRIPT = 4
  };
  /// The script to run.
  const ScriptDef *script() const {
    return GetPointer<const ScriptDef *>(VT_SCRIPT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SCRIPT) &&
           verifier.VerifyTable(script()) &&
           verifier.EndTable();
  }
};

struct ScriptOnCreateDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_script(flatbuffers::Offset<ScriptDef> script) {
    fbb_.AddOffset(ScriptOnCreateDef::VT_SCRIPT, script);
  }
  ScriptOnCreateDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ScriptOnCreateDefBuilder &operator=(const ScriptOnCreateDefBuilder &);
  flatbuffers::Offset<ScriptOnCreateDef> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<ScriptOnCreateDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<ScriptOnCreateDef> CreateScriptOnCreateDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ScriptDef> script = 0) {
  ScriptOnCreateDefBuilder builder_(_fbb);
  builder_.add_script(script);
  return builder_.Finish();
}

/// Specifies a script to be run just after the entity is created.
struct ScriptOnPostCreateInitDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.ScriptOnPostCreateInitDef";
  }
  enum {
    VT_SCRIPT = 4
  };
  /// The script to run.
  const ScriptDef *script() const {
    return GetPointer<const ScriptDef *>(VT_SCRIPT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SCRIPT) &&
           verifier.VerifyTable(script()) &&
           verifier.EndTable();
  }
};

struct ScriptOnPostCreateInitDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_script(flatbuffers::Offset<ScriptDef> script) {
    fbb_.AddOffset(ScriptOnPostCreateInitDef::VT_SCRIPT, script);
  }
  ScriptOnPostCreateInitDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ScriptOnPostCreateInitDefBuilder &operator=(const ScriptOnPostCreateInitDefBuilder &);
  flatbuffers::Offset<ScriptOnPostCreateInitDef> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<ScriptOnPostCreateInitDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<ScriptOnPostCreateInitDef> CreateScriptOnPostCreateInitDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ScriptDef> script = 0) {
  ScriptOnPostCreateInitDefBuilder builder_(_fbb);
  builder_.add_script(script);
  return builder_.Finish();
}

/// Specifies a script to be run when the entity is destroyed.
struct ScriptOnDestroyDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.ScriptOnDestroyDef";
  }
  enum {
    VT_SCRIPT = 4
  };
  /// The script to run.
  const ScriptDef *script() const {
    return GetPointer<const ScriptDef *>(VT_SCRIPT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SCRIPT) &&
           verifier.VerifyTable(script()) &&
           verifier.EndTable();
  }
};

struct ScriptOnDestroyDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_script(flatbuffers::Offset<ScriptDef> script) {
    fbb_.AddOffset(ScriptOnDestroyDef::VT_SCRIPT, script);
  }
  ScriptOnDestroyDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ScriptOnDestroyDefBuilder &operator=(const ScriptOnDestroyDefBuilder &);
  flatbuffers::Offset<ScriptOnDestroyDef> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<ScriptOnDestroyDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<ScriptOnDestroyDef> CreateScriptOnDestroyDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ScriptDef> script = 0) {
  ScriptOnDestroyDefBuilder builder_(_fbb);
  builder_.add_script(script);
  return builder_.Finish();
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_SCRIPTDEF_LULL_H_
