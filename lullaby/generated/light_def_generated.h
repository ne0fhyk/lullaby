// Autogenerated code.  Do not edit.
#ifndef _LULLABY_LULLABY_GENERATED_LIGHT_DEF_GENERATED_H_
#define _LULLABY_LULLABY_GENERATED_LIGHT_DEF_GENERATED_H_

#include <type_traits>
#include <memory>
#include "flatbuffers/light_def_generated.h"
#include "lullaby/util/color.h"
#include "lullaby/util/common_types.h"
#include "lullaby/util/math.h"
#include "lullaby/util/optional.h"
#include "lullaby/util/typeid.h"
#include "common_generated.h"

namespace lull {
class AmbientLightDefT;
class DirectionalLightDefT;
class PointLightDefT;
class LightableDefT;
class AmbientLightDefT {
 public:
  using FlatBufferType = AmbientLightDef;

  AmbientLightDefT() {}

  lull::HashValue group = 0;
  lull::Color4ub color = {0, 0, 0, 0};

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class DirectionalLightDefT {
 public:
  using FlatBufferType = DirectionalLightDef;

  DirectionalLightDefT() {}

  lull::HashValue group = 0;
  lull::Color4ub color = {0, 0, 0, 0};
  float exponent = 0.0f;
  mathfu::quat rotation = {0.f, 0.f, 0.f, 1.f};

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class PointLightDefT {
 public:
  using FlatBufferType = PointLightDef;

  PointLightDefT() {}

  lull::HashValue group = 0;
  lull::Color4ub color = {0, 0, 0, 0};
  float intensity = 0.0f;
  float exponent = 0.0f;
  mathfu::vec3 position = {0.f, 0.f, 0.f};

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class LightableDefT {
 public:
  using FlatBufferType = LightableDef;

  LightableDefT() {}

  lull::HashValue group = 0;
  int32_t max_ambient_lights = 0;
  int32_t max_directional_lights = 0;
  int32_t max_point_lights = 0;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

template <typename Archive>
void AmbientLightDefT::SerializeFlatbuffer(Archive archive) {
  archive.Scalar(&group, 4, 0);
  archive.NativeStruct(&color, 6);
}

template <typename Archive>
void DirectionalLightDefT::SerializeFlatbuffer(Archive archive) {
  archive.Scalar(&group, 4, 0);
  archive.NativeStruct(&color, 6);
  archive.Scalar(&exponent, 8, 0.0f);
  archive.NativeStruct(&rotation, 10);
}

template <typename Archive>
void PointLightDefT::SerializeFlatbuffer(Archive archive) {
  archive.Scalar(&group, 4, 0);
  archive.NativeStruct(&color, 6);
  archive.Scalar(&intensity, 8, 0.0f);
  archive.Scalar(&exponent, 10, 0.0f);
  archive.NativeStruct(&position, 12);
}

template <typename Archive>
void LightableDefT::SerializeFlatbuffer(Archive archive) {
  archive.Scalar(&group, 4, 0);
  archive.Scalar(&max_ambient_lights, 6, 0);
  archive.Scalar(&max_directional_lights, 8, 0);
  archive.Scalar(&max_point_lights, 10, 0);
}

}  // namespace lull

LULLABY_SETUP_TYPEID(lull::AmbientLightDefT);
LULLABY_SETUP_TYPEID(lull::DirectionalLightDefT);
LULLABY_SETUP_TYPEID(lull::PointLightDefT);
LULLABY_SETUP_TYPEID(lull::LightableDefT);

#endif  // _LULLABY_LULLABY_GENERATED_LIGHT_DEF_GENERATED_H_

