// Autogenerated code.  Do not edit.
#ifndef _LULLABY_LULLABY_GENERATED_MAP_EVENTS_DEF_GENERATED_H_
#define _LULLABY_LULLABY_GENERATED_MAP_EVENTS_DEF_GENERATED_H_

#include <type_traits>
#include <memory>
#include "flatbuffers/map_events_def_generated.h"
#include "lullaby/util/common_types.h"
#include "lullaby/util/color.h"
#include "lullaby/util/math.h"
#include "lullaby/util/optional.h"
#include "lullaby/util/typeid.h"
#include "common_generated.h"
#include "dispatcher_def_generated.h"
#include "variant_def_generated.h"

namespace lull {
class EventMapDefT;
class MapEventsToChildrenDefT;
class MapEventsToParentDefT;
class MapEventsToSiblingsDefT;
class MapEventsToGroupDefT;
class EventMapDefT {
 public:
  using FlatBufferType = EventMapDef;

  EventMapDefT() {}

  std::vector<lull::EventDefT> input_events;
  std::vector<lull::EventDefT> output_events;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class MapEventsToChildrenDefT {
 public:
  using FlatBufferType = MapEventsToChildrenDef;

  MapEventsToChildrenDefT() {}

  lull::EventMapDefT events;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class MapEventsToParentDefT {
 public:
  using FlatBufferType = MapEventsToParentDef;

  MapEventsToParentDefT() {}

  lull::EventMapDefT events;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class MapEventsToSiblingsDefT {
 public:
  using FlatBufferType = MapEventsToSiblingsDef;

  MapEventsToSiblingsDefT() {}

  lull::EventMapDefT events;
  bool include_self = 0;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class MapEventsToGroupDefT {
 public:
  using FlatBufferType = MapEventsToGroupDef;

  MapEventsToGroupDefT() {}

  std::string group;
  lull::EventMapDefT events;
  bool include_self = 0;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

template <typename Archive>
void EventMapDefT::SerializeFlatbuffer(Archive archive) {
  archive.VectorOfTables(&input_events, 4);
  archive.VectorOfTables(&output_events, 6);
}

template <typename Archive>
void MapEventsToChildrenDefT::SerializeFlatbuffer(Archive archive) {
  archive.Table(&events, 4);
}

template <typename Archive>
void MapEventsToParentDefT::SerializeFlatbuffer(Archive archive) {
  archive.Table(&events, 4);
}

template <typename Archive>
void MapEventsToSiblingsDefT::SerializeFlatbuffer(Archive archive) {
  archive.Table(&events, 4);
  archive.Scalar(&include_self, 6, 0);
}

template <typename Archive>
void MapEventsToGroupDefT::SerializeFlatbuffer(Archive archive) {
  archive.String(&group, 4);
  archive.Table(&events, 6);
  archive.Scalar(&include_self, 8, 0);
}

}  // namespace lull

LULLABY_SETUP_TYPEID(lull::EventMapDefT);
LULLABY_SETUP_TYPEID(lull::MapEventsToChildrenDefT);
LULLABY_SETUP_TYPEID(lull::MapEventsToParentDefT);
LULLABY_SETUP_TYPEID(lull::MapEventsToSiblingsDefT);
LULLABY_SETUP_TYPEID(lull::MapEventsToGroupDefT);

#endif  // _LULLABY_LULLABY_GENERATED_MAP_EVENTS_DEF_GENERATED_H_

