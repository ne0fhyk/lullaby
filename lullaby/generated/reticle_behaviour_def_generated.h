// Autogenerated code.  Do not edit.
#ifndef _LULLABY_LULLABY_GENERATED_RETICLE_BEHAVIOUR_DEF_GENERATED_H_
#define _LULLABY_LULLABY_GENERATED_RETICLE_BEHAVIOUR_DEF_GENERATED_H_

#include <type_traits>
#include <memory>
#include "flatbuffers/reticle_behaviour_def_generated.h"
#include "lullaby/util/common_types.h"
#include "lullaby/util/color.h"
#include "lullaby/util/math.h"
#include "lullaby/util/optional.h"
#include "lullaby/util/typeid.h"
#include "common_generated.h"

namespace lull {
class ReticleBehaviourDefT;
class ReticleBehaviourDefT {
 public:
  using FlatBufferType = ReticleBehaviourDef;

  ReticleBehaviourDefT() {}

  mathfu::vec3 hover_start_dead_zone = {0.f, 0.f, 0.f};
  lull::ReticleCollisionBehaviour collision_behaviour = lull::ReticleCollisionBehaviour_HandleAlone;
  bool interactive_if_handle_descendants = 1;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

template <typename Archive>
void ReticleBehaviourDefT::SerializeFlatbuffer(Archive archive) {
  archive.NativeStruct(&hover_start_dead_zone, 4);
  int32_t _collision_behaviour = static_cast<int32_t>(collision_behaviour);
  archive.Scalar(&_collision_behaviour, 6, lull::ReticleCollisionBehaviour_HandleAlone);
  collision_behaviour = static_cast<lull::ReticleCollisionBehaviour>(_collision_behaviour);
  archive.Scalar(&interactive_if_handle_descendants, 8, 1);
}

}  // namespace lull

LULLABY_SETUP_TYPEID(lull::ReticleCollisionBehaviour);
LULLABY_SETUP_TYPEID(lull::ReticleBehaviourDefT);

#endif  // _LULLABY_LULLABY_GENERATED_RETICLE_BEHAVIOUR_DEF_GENERATED_H_

