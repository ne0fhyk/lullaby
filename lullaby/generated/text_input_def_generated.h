// Autogenerated code.  Do not edit.
#ifndef _LULLABY_LULLABY_GENERATED_TEXT_INPUT_DEF_GENERATED_H_
#define _LULLABY_LULLABY_GENERATED_TEXT_INPUT_DEF_GENERATED_H_

#include <type_traits>
#include <memory>
#include "flatbuffers/text_input_def_generated.h"
#include "lullaby/util/common_types.h"
#include "lullaby/util/color.h"
#include "lullaby/util/math.h"
#include "lullaby/util/optional.h"
#include "lullaby/util/typeid.h"
#include "common_generated.h"

namespace lull {
class TextInputDefT;
class TextInputDefT {
 public:
  using FlatBufferType = TextInputDef;

  TextInputDefT() {}

  bool activate_immediately = 0;
  bool deactivate_on_accept = 0;
  std::string hint;
  lull::Color4ub hint_color;
  std::string composing_entity;
  float composing_distance = 0.0f;
  float composing_thickness = 0.0f;
  std::string caret_entity;
  bool is_clipped = 0;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

template <typename Archive>
void TextInputDefT::SerializeFlatbuffer(Archive archive) {
  archive.String(&hint, 8);
  archive.String(&composing_entity, 12);
  archive.String(&caret_entity, 18);
  archive.Scalar(&activate_immediately, 4, 0);
  archive.Scalar(&deactivate_on_accept, 6, 0);
  archive.NativeStruct(&hint_color, 10);
  archive.Scalar(&composing_distance, 14, 0.0f);
  archive.Scalar(&composing_thickness, 16, 0.0f);
  archive.Scalar(&is_clipped, 20, 0);
}

}  // namespace lull

LULLABY_SETUP_TYPEID(lull::TextInputDefT);

#endif  // _LULLABY_LULLABY_GENERATED_TEXT_INPUT_DEF_GENERATED_H_

