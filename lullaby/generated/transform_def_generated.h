// Autogenerated code.  Do not edit.
#ifndef _LULLABY_LULLABY_GENERATED_TRANSFORM_DEF_GENERATED_H_
#define _LULLABY_LULLABY_GENERATED_TRANSFORM_DEF_GENERATED_H_

#include <type_traits>
#include <memory>
#include "flatbuffers/transform_def_generated.h"
#include "lullaby/util/common_types.h"
#include "lullaby/util/color.h"
#include "lullaby/util/math.h"
#include "lullaby/util/optional.h"
#include "lullaby/util/typeid.h"
#include "common_generated.h"

namespace lull {
class TransformDefT;
class TransformDefT {
 public:
  using FlatBufferType = TransformDef;

  TransformDefT() {}

  mathfu::vec3 position = {0.f, 0.f, 0.f};
  mathfu::vec3 rotation = {0.f, 0.f, 0.f};
  mathfu::vec3 scale = {1.f, 1.f, 1.f};
  std::vector<std::string> children;
  lull::Aabb aabb;
  lull::Aabb aabb_padding;
  lull::Optional<mathfu::vec4> quaternion;
  bool enabled = 1;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

template <typename Archive>
void TransformDefT::SerializeFlatbuffer(Archive archive) {
  archive.VectorOfStrings(&children, 10);
  archive.NativeStruct(&position, 4);
  archive.NativeStruct(&rotation, 6);
  archive.NativeStruct(&scale, 8);
  archive.NativeStruct(&aabb, 12);
  archive.NativeStruct(&aabb_padding, 14);
  archive.NativeStruct(&quaternion, 16);
  archive.Scalar(&enabled, 18, 1);
}

}  // namespace lull

LULLABY_SETUP_TYPEID(lull::TransformDefT);

#endif  // _LULLABY_LULLABY_GENERATED_TRANSFORM_DEF_GENERATED_H_

