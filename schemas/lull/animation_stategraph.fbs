include "lull/common.fbs";
include "lull/variant_def.fbs";

namespace lull;

/// Animation selector that picks the first track in a state.
table FirstAnimationSelectorDef {}

/// Animation selector that picks a random track in a state.  If the
/// track's selection parameters include a float key named 'weight',
/// the selection will be influenced by the relative weights of the
/// tracks.  If not supplied, the default weight is 1.0.
table RandomAnimationSelectorDef {}

/// Union of all animation selectors.
union AnimationSelectorDef {
  FirstAnimationSelectorDef,
  RandomAnimationSelectorDef,
}

/// An animation window within a single track of animation.
table AnimationSignalDef {
  /// The unique name (id) of the signal.
  id: uint = 0 (hashvalue);

  /// The start time (in seconds) when the signal is active.
  start_time_s: float;

  /// The end time (in seconds) when the signal is no longer active.
  end_time_s: float;

  /// Inline script to execute when entering the signal.
  on_enter: string;

  /// Inline script to execute when exiting the signal.
  on_exit: string;
}

/// An animation track representing a single animation to play.
table AnimationTrackDef {
  /// The filename of the animation to load and play.
  animation: string;

  /// The speed at which to playback the animation.
  playback_speed: float = 1.0;

  /// The collection of signals associated with the track.
  signals: [AnimationSignalDef];

  /// The parameters associated with the animation that can be used in
  /// conjunction with the owning state's selector to pick this track.
  selection_params: VariantMapDef;

  /// The channel to use for animations.  Defaults to "render-rig".
  animation_channel: uint = 0 (hashvalue);
}

/// A transition between two states within the stategraph.
table AnimationTransitionDef {
  /// The name (id) of the destination/target state.
  to_state: uint = 0 (hashvalue);

  /// The time before the end of the animation at which this transition is
  /// valid.
  active_time_from_end_s: float = 0.0;

  /// Whether or not the transition is valid for the entire duration of the
  /// animation.
  active_for_entire_time: bool = false;

  /// The time to blend between the source animation and the target animation.
  blend_time_s: float = 0.0;
}

/// A single animation state within a stategraph.
table AnimationStateDef {
  /// The unique name (id) of the state.
  id: uint = 0 (hashvalue);

  /// The selector to use to pick a track when entering the state.
  selector: AnimationSelectorDef;

  /// The list of tracks associated with the state.
  tracks: [AnimationTrackDef];

  /// The transitions exiting this state to enter the next state.
  transitions: [AnimationTransitionDef];

  /// Index of the default transition, which occurs automatically when
  /// the current animation ends.
  default_transition_index: uint = 0;
}

/// An animation stategraph which is a collection of animation states.
table AnimationStategraphDef {
  /// Collection of states associated with the stategraph.
  states: [AnimationStateDef];
}

root_type AnimationStategraphDef;
file_extension "stategraph";
