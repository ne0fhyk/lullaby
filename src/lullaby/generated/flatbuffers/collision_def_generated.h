// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COLLISIONDEF_LULL_H_
#define FLATBUFFERS_GENERATED_COLLISIONDEF_LULL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace lull {

struct CollisionDef;

/// When *CollisionDef* is specified, the entity is included in the
/// CollisionSystem, which enables a raycast test to find the nearest entity
/// which is intersecting a Ray.
struct CollisionDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.CollisionDef";
  }
  enum {
    VT_COLLISION_ON_EXIT = 4,
    VT_INTERACTIVE = 6
  };
  /// If set to false (default), the ray-bounding box intersection test will
  /// return the point where the ray enters the bounding box.
  /// If set to true, the point where the ray exists the bounding box will be
  /// returned instead.
  /// The purpose of this mode is to easily enable collisions for small objects
  /// within the bounding box of a larger object by setting the larger object
  /// to collision_on_exit mode.
  bool collision_on_exit() const {
    return GetField<uint8_t>(VT_COLLISION_ON_EXIT, 0) != 0;
  }
  /// If set to true, the Entity will be interactive (ie. you can click on
  /// the entity with the reticle).
  bool interactive() const {
    return GetField<uint8_t>(VT_INTERACTIVE, 1) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_COLLISION_ON_EXIT) &&
           VerifyField<uint8_t>(verifier, VT_INTERACTIVE) &&
           verifier.EndTable();
  }
};

struct CollisionDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_collision_on_exit(bool collision_on_exit) {
    fbb_.AddElement<uint8_t>(CollisionDef::VT_COLLISION_ON_EXIT, static_cast<uint8_t>(collision_on_exit), 0);
  }
  void add_interactive(bool interactive) {
    fbb_.AddElement<uint8_t>(CollisionDef::VT_INTERACTIVE, static_cast<uint8_t>(interactive), 1);
  }
  CollisionDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CollisionDefBuilder &operator=(const CollisionDefBuilder &);
  flatbuffers::Offset<CollisionDef> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<CollisionDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<CollisionDef> CreateCollisionDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool collision_on_exit = false,
    bool interactive = true) {
  CollisionDefBuilder builder_(_fbb);
  builder_.add_interactive(interactive);
  builder_.add_collision_on_exit(collision_on_exit);
  return builder_.Finish();
}

inline const lull::CollisionDef *GetCollisionDef(const void *buf) {
  return flatbuffers::GetRoot<lull::CollisionDef>(buf);
}

inline bool VerifyCollisionDefBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<lull::CollisionDef>(nullptr);
}

inline void FinishCollisionDefBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<lull::CollisionDef> root) {
  fbb.Finish(root);
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_COLLISIONDEF_LULL_H_
