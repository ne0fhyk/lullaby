// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NAMEDEF_LULL_H_
#define FLATBUFFERS_GENERATED_NAMEDEF_LULL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace lull {

struct NameDef;

/// Specifies the name of an entity, so the entity can be retrieved by that name
/// from the NameSystem.
struct NameDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "lull.NameDef";
  }
  enum {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct NameDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(NameDef::VT_NAME, name);
  }
  NameDefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NameDefBuilder &operator=(const NameDefBuilder &);
  flatbuffers::Offset<NameDef> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<NameDef>(end);
    return o;
  }
};

inline flatbuffers::Offset<NameDef> CreateNameDef(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  NameDefBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<NameDef> CreateNameDefDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  return lull::CreateNameDef(
      _fbb,
      name ? _fbb.CreateString(name) : 0);
}

inline const lull::NameDef *GetNameDef(const void *buf) {
  return flatbuffers::GetRoot<lull::NameDef>(buf);
}

inline bool VerifyNameDefBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<lull::NameDef>(nullptr);
}

inline void FinishNameDefBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<lull::NameDef> root) {
  fbb.Finish(root);
}

}  // namespace lull

#endif  // FLATBUFFERS_GENERATED_NAMEDEF_LULL_H_
