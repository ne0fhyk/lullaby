// Autogenerated code.  Do not edit.
#ifndef _SRC_LULLABY_GENERATED_SCRIPT_DEF_GENERATED_H_
#define _SRC_LULLABY_GENERATED_SCRIPT_DEF_GENERATED_H_

#include <type_traits>
#include <memory>
#include "flatbuffers/script_def_generated.h"
#include "lullaby/base/common_types.h"
#include "lullaby/base/typeid.h"
#include "lullaby/util/color.h"
#include "lullaby/util/math.h"
#include "lullaby/util/optional.h"
#include "common_generated.h"
#include "dispatcher_def_generated.h"
#include "variant_def_generated.h"

namespace lull {
class ScriptDefT;
class ScriptOnEventDefT;
class ScriptEveryFrameDefT;
class ScriptOnCreateDefT;
class ScriptOnPostCreateInitDefT;
class ScriptOnDestroyDefT;
class ScriptDefT {
 public:
  using FlatBufferType = ScriptDef;

  std::string filename;
  std::string code;
  std::string debug_name;
  lull::Language language = lull::Language_Unknown;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class ScriptOnEventDefT {
 public:
  using FlatBufferType = ScriptOnEventDef;

  std::vector<lull::EventDefT> inputs;
  lull::ScriptDefT script;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class ScriptEveryFrameDefT {
 public:
  using FlatBufferType = ScriptEveryFrameDef;

  lull::ScriptDefT script;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class ScriptOnCreateDefT {
 public:
  using FlatBufferType = ScriptOnCreateDef;

  lull::ScriptDefT script;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class ScriptOnPostCreateInitDefT {
 public:
  using FlatBufferType = ScriptOnPostCreateInitDef;

  lull::ScriptDefT script;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

class ScriptOnDestroyDefT {
 public:
  using FlatBufferType = ScriptOnDestroyDef;

  lull::ScriptDefT script;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

template <typename Archive>
void ScriptDefT::SerializeFlatbuffer(Archive archive) {
  archive.String(&filename, 4);
  archive.String(&code, 6);
  archive.String(&debug_name, 8);
  int32_t _language = static_cast<int32_t>(language);
  archive.Scalar(&_language, 10, lull::Language_Unknown);
  language = static_cast<lull::Language>(_language);
}

template <typename Archive>
void ScriptOnEventDefT::SerializeFlatbuffer(Archive archive) {
  archive.VectorOfTables(&inputs, 4);
  archive.Table(&script, 6);
}

template <typename Archive>
void ScriptEveryFrameDefT::SerializeFlatbuffer(Archive archive) {
  archive.Table(&script, 4);
}

template <typename Archive>
void ScriptOnCreateDefT::SerializeFlatbuffer(Archive archive) {
  archive.Table(&script, 4);
}

template <typename Archive>
void ScriptOnPostCreateInitDefT::SerializeFlatbuffer(Archive archive) {
  archive.Table(&script, 4);
}

template <typename Archive>
void ScriptOnDestroyDefT::SerializeFlatbuffer(Archive archive) {
  archive.Table(&script, 4);
}

}  // namespace lull

LULLABY_SETUP_TYPEID(lull::ScriptDefT);
LULLABY_SETUP_TYPEID(lull::ScriptOnEventDefT);
LULLABY_SETUP_TYPEID(lull::ScriptEveryFrameDefT);
LULLABY_SETUP_TYPEID(lull::ScriptOnCreateDefT);
LULLABY_SETUP_TYPEID(lull::ScriptOnPostCreateInitDefT);
LULLABY_SETUP_TYPEID(lull::ScriptOnDestroyDefT);

#endif  // _SRC_LULLABY_GENERATED_SCRIPT_DEF_GENERATED_H_

