// Autogenerated code.  Do not edit.
#ifndef _SRC_LULLABY_GENERATED_TEXT_DEF_GENERATED_H_
#define _SRC_LULLABY_GENERATED_TEXT_DEF_GENERATED_H_

#include <type_traits>
#include <memory>
#include "flatbuffers/text_def_generated.h"
#include "lullaby/base/common_types.h"
#include "lullaby/base/typeid.h"
#include "lullaby/util/color.h"
#include "lullaby/util/math.h"
#include "lullaby/util/optional.h"
#include "common_generated.h"
#include "render_def_generated.h"

namespace lull {
class TextDefT;
class TextDefT {
 public:
  using FlatBufferType = TextDef;

  std::string text;
  std::vector<std::string> fonts;
  float font_size = 0.0f;
  float line_height = 0.0f;
  float line_height_scale = 1.2f;
  lull::HorizontalAlignment horizontal_alignment = lull::HorizontalAlignment_Center;
  lull::VerticalAlignment vertical_alignment = lull::VerticalAlignment_Baseline;
  lull::TextDirection direction = lull::TextDirection_UseSystemSetting;
  mathfu::vec2 bounds = {0.f, 0.f};
  lull::TextWrapMode wrap_mode = lull::TextWrapMode_None;
  std::string ellipsis;
  float edge_softness = 0.3f;
  float kerning_scale = 1.0f;
  lull::TextHtmlMode html_mode = lull::TextHtmlMode_Ignore;
  std::string link_text_blueprint;
  std::string link_underline_blueprint;

  template <typename Archive>
  void SerializeFlatbuffer(Archive archive);
};

template <typename Archive>
void TextDefT::SerializeFlatbuffer(Archive archive) {
  archive.String(&text, 4);
  archive.VectorOfStrings(&fonts, 6);
  archive.String(&ellipsis, 24);
  archive.String(&link_text_blueprint, 32);
  archive.String(&link_underline_blueprint, 34);
  archive.Scalar(&font_size, 8, 0.0f);
  archive.Scalar(&line_height, 10, 0.0f);
  archive.Scalar(&line_height_scale, 12, 1.2f);
  int32_t _horizontal_alignment = static_cast<int32_t>(horizontal_alignment);
  archive.Scalar(&_horizontal_alignment, 14, lull::HorizontalAlignment_Center);
  horizontal_alignment = static_cast<lull::HorizontalAlignment>(_horizontal_alignment);
  int32_t _vertical_alignment = static_cast<int32_t>(vertical_alignment);
  archive.Scalar(&_vertical_alignment, 16, lull::VerticalAlignment_Baseline);
  vertical_alignment = static_cast<lull::VerticalAlignment>(_vertical_alignment);
  int32_t _direction = static_cast<int32_t>(direction);
  archive.Scalar(&_direction, 18, lull::TextDirection_UseSystemSetting);
  direction = static_cast<lull::TextDirection>(_direction);
  archive.NativeStruct(&bounds, 20);
  int32_t _wrap_mode = static_cast<int32_t>(wrap_mode);
  archive.Scalar(&_wrap_mode, 22, lull::TextWrapMode_None);
  wrap_mode = static_cast<lull::TextWrapMode>(_wrap_mode);
  archive.Scalar(&edge_softness, 26, 0.3f);
  archive.Scalar(&kerning_scale, 28, 1.0f);
  int32_t _html_mode = static_cast<int32_t>(html_mode);
  archive.Scalar(&_html_mode, 30, lull::TextHtmlMode_Ignore);
  html_mode = static_cast<lull::TextHtmlMode>(_html_mode);
}

}  // namespace lull

LULLABY_SETUP_TYPEID(lull::TextDefT);

#endif  // _SRC_LULLABY_GENERATED_TEXT_DEF_GENERATED_H_

