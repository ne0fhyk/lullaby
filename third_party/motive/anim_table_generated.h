/*
Copyright 2017 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ANIMTABLE_MOTIVE_H_
#define FLATBUFFERS_GENERATED_ANIMTABLE_MOTIVE_H_

#include "flatbuffers/flatbuffers.h"

#include "anim_generated.h"
#include "anim_list_generated.h"
#include "compact_spline_generated.h"

namespace motive {

struct AnimTableFb;

struct AnimTableFb FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LISTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<motive::AnimListFb>> *lists() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<motive::AnimListFb>> *>(VT_LISTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LISTS) &&
           verifier.Verify(lists()) &&
           verifier.VerifyVectorOfTables(lists()) &&
           verifier.EndTable();
  }
};

struct AnimTableFbBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_lists(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<motive::AnimListFb>>> lists) {
    fbb_.AddOffset(AnimTableFb::VT_LISTS, lists);
  }
  AnimTableFbBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnimTableFbBuilder &operator=(const AnimTableFbBuilder &);
  flatbuffers::Offset<AnimTableFb> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<AnimTableFb>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnimTableFb> CreateAnimTableFb(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<motive::AnimListFb>>> lists = 0) {
  AnimTableFbBuilder builder_(_fbb);
  builder_.add_lists(lists);
  return builder_.Finish();
}

inline flatbuffers::Offset<AnimTableFb> CreateAnimTableFbDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<motive::AnimListFb>> *lists = nullptr) {
  return motive::CreateAnimTableFb(
      _fbb,
      lists ? _fbb.CreateVector<flatbuffers::Offset<motive::AnimListFb>>(*lists) : 0);
}

inline const motive::AnimTableFb *GetAnimTableFb(const void *buf) {
  return flatbuffers::GetRoot<motive::AnimTableFb>(buf);
}

inline const char *AnimTableFbIdentifier() {
  return "ATAB";
}

inline bool AnimTableFbBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, AnimTableFbIdentifier());
}

inline bool VerifyAnimTableFbBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<motive::AnimTableFb>(AnimTableFbIdentifier());
}

inline const char *AnimTableFbExtension() {
  return "motivetab";
}

inline void FinishAnimTableFbBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<motive::AnimTableFb> root) {
  fbb.Finish(root, AnimTableFbIdentifier());
}

}  // namespace motive

#endif  // FLATBUFFERS_GENERATED_ANIMTABLE_MOTIVE_H_
